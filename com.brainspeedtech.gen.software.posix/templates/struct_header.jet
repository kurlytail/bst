<%@ jet package="com.brainspeedtech.gen.software.posix"
	class="StructHeaderFile" 
	imports ="org.eclipse.emf.ecore.*
	com.brainspeedtech.struct.*
	com.brainspeedtech.struct.util.*
	org.eclipse.emf.ecore.resource.*
	org.eclipse.core.resources.*
	com.brainspeedtech.constraint.software.*
	java.io.*
	org.eclipse.emf.common.util.*
	com.brainspeedtech.swarm.project.util.*
	org.eclipse.emf.ecore.util.*
	com.brainspeedtech.struct.util.*
	com.brainspeedtech.swarm.master.*
	com.brainspeedtech.swarm.project.util.ProjectUtil
	java.util.*;"
%>

<%Resource resource = (Resource) argument;
	String fileName = resource.getURI().lastSegment()
						.replaceAll("\\.struct$", "");
    MasterDesign design = ProjectUtil.getMasterDesign(resource);
%>

/*
 *  (c)2013 Mangstor, LLC. All rights reserved.
 */

#ifndef __GEN__<%=fileName.toUpperCase()%>_H__
#define __GEN__<%=fileName.toUpperCase()%>_H__
#include <stdint.h>

#include "gen_<%=design.getName()%>_parameters.h"
<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/resolve_struct_includes.jet"%>
#ifndef SWARM_STATIC_ASSERT
#define SWARM_STATIC_ASSERT(__condition__, __name__) \
	typedef char assert_failed_ ## __name__ [(__condition__)? 1: -1];
#endif

#ifndef SWARM_SIZEOF
#define SWARM_SIZEOF(__arg__) (sizeof(__arg__))
#endif

<%for(Atom atom: atoms) {
	if(ProjectUtil.getReferringInstance(atom, NativeType.class) != null) {
		if(atom instanceof Struct) { %>
void swarm_print_struct_<%=atom.getName()%>(<%=atom.getName()%>_t *value, int level);
<%		}
		continue;	
	}
	if(atom instanceof Struct) { %>
typedef struct _<%=atom.getName()%> {
<%		for (Field f : ((Struct) atom).getField()) {
			if (f.getAtom() == null) {
				if (StructUtil.getFieldCount(f) <= 32) {%>
	uint32_t <%=f.getName()%>:<%=StructUtil.getFieldCountString(f)%>;
<%				}
			} else if (f.getAtom() instanceof com.brainspeedtech.struct.Enum) {
				if (StructUtil.getFieldCount(f) <= 1) {
					if (f.getAtom().getCount() <= 32) {%>
	uint32_t <%=f.getName()%>:<%=StructUtil.getFieldCountString(f)%>;
<%
					} else {%>
	struct {
		uint32_t <%=f.getName()%>:<%=f.getAtom().getCount()%>;
	} [<%=StructUtil.getFieldCountString(f)%>];
<%					}
				} else {
					String fieldCount = "";
					if (StructUtil.getFieldCount(f) > 1) {
						fieldCount = "[" + StructUtil.getFieldCountString(f) + "]";
					} 
%>
	<%=f.getAtom().getName()%>_t <%=f.getName()%> <%=fieldCount%>;
<%				}
			} else {
				if (StructUtil.getFieldCount(f) <= 1) { %>
	<%=f.getAtom().getName()%>_t <%=f.getName()%>;
<%
				} else {
%>
	<%=f.getAtom().getName()%>_t <%=f.getName()%>[<%=StructUtil.getFieldCountString(f)%>];
<%				}
			}
		}
%>
} __attribute__((aligned(1), packed)) <%=atom.getName()%>_t;
extern void swarm_print_struct_<%=atom.getName()%>(<%=atom.getName()%>_t *value, int level);

<%
	} else if (atom instanceof com.brainspeedtech.struct.Enum) {
%>
typedef enum _<%=atom.getName()%> {
<%		for (EnumTerm et : ((com.brainspeedtech.struct.Enum) atom).getTerm()) {%>
	<%=et.getName()%> = <%=et.getValue()%>,
<%		}%>
	<%=atom.getName()%>_MAX
} ENUM_<%=atom.getName()%>;

<%
	}
}%>

<%for(Struct struct: structs) {
	long currentLocation = 0;
%>

#define <%=struct.getName().toUpperCase()%>_SIZE	(<%=StructUtil.getAtomSize(struct)/8%>UL)
SWARM_STATIC_ASSERT(<%=struct.getName().toUpperCase()%>_SIZE == sizeof(<%=struct.getName()%>_t), __<%=struct.getName()%>__calculated_size_mismatch);

<%	for(Field field: struct.getField()) {
	long nextLocation = currentLocation + StructUtil.getFieldCount(field) * 
			StructUtil.getAtomSize(field.getAtom());
%>
#define <%=struct.getName().toUpperCase()%>_<%=field.getName().toUpperCase()%>_OFFSET	(<%=(currentLocation/8)%>UL)
#define <%=struct.getName().toUpperCase()%>_<%=field.getName().toUpperCase()%>_SIZE		(<%=((nextLocation - currentLocation)/8)%>UL)
<%	currentLocation = nextLocation;
	}%>
<%}%>


#endif
