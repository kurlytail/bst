<%@ jet package="com.brainspeedtech.gen.software.posix"
	class="InstancePlanSourceFile" 
	imports ="java.util.*
	com.brainspeedtech.swarm.layer.util.*
	com.brainspeedtech.swarm.layer.*
	com.brainspeedtech.swarm.sm.*
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.swarm.master.util.*
	com.brainspeedtech.swarm.flow.*
	com.brainspeedtech.swarm.master.*
	com.brainspeedtech.swarm.project.util.*
	com.brainspeedtech.constraint.software.*
	org.eclipse.emf.ecore.util.*
	com.brainspeedtech.constraint.software.posix.*
	org.eclipse.emf.ecore.*;"
%>
<%MasterCell cell = (MasterCell) argument;%>
<%@ include file="ccopyright.jet"%>

#include "gen_<%=cell.getName()%>.h"

<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/sm_instancing_source.jet"%>

<%
 Collection<SharedVariable> sharedVariables = ProjectUtil.getReferringInstances(cell, SharedVariable.class);
  Set<SharedMemoryTube> sharedMemoryTubes = new HashSet<SharedMemoryTube>();
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(cell.getInput(), SharedMemoryTube.class));
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(cell.getOutput(), SharedMemoryTube.class));
 
%>
<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/shared_mem_init_defn.jet"%>

int <%=cell.getName()%>_init()
{

<%
    Tap tap = ProjectUtil.getReferringInstance(cell, Tap.class);
    if (tap != null) { 
        for(MasterTube ti: tap.getTube()) {
        if(ProjectUtil.getReferringInstance(ti, IgnorePosixTube.class) != null) continue;
 		if (ProjectUtil.getReferringInstance(ti, SharedMemoryTube.class) != null) continue;
        
        int i = 0;
        Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
        for(TubeInstance tInstance: tubeInstances) {
%>
#ifdef GEN_PLATFORM_POSIX
    SWARM_POSIX_FIFO_THREAD(INPUT_<%=ti.getName().toUpperCase()%>_0,
            OUTPUT_<%=ti.getName().toUpperCase()%>_0);
#endif
<%
            ++i;
            break;
        }
    }
}%>

	return 0;
}

int <%=cell.getName()%>_idle()
{
/*
<%
for (MasterTube mt: cell.getOutput()) {
	if (ProjectUtil.getReferringInstance(mt, IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(mt, SharedMemoryTube.class) != null) continue;
	Set<Flow> outputFlows = MasterUtil.getFlows(mt);
	Set<Flow> inputFlows = new HashSet<Flow>();
	for(MasterTube ti: cell.getInput()) {
		if (ProjectUtil.getReferringInstance(ti, IgnorePosixTube.class) != null) continue;
		if (ProjectUtil.getReferringInstance(ti, SharedMemoryTube.class) != null) continue;
		inputFlows = MasterUtil.getFlows(ti);
		inputFlows.retainAll(outputFlows);
		if (!inputFlows.isEmpty()) {
			break;
		}
	}
	
	if (inputFlows.isEmpty()) {
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(mt, TubeInstance.class);
		CellInstance cinst = ProjectUtil.getReferringInstance(cell, CellInstance.class);
		if (cinst != null)
			tubeInstances.retainAll(cinst.getOutput());
		int tIndex = 0;
		for(TubeInstance ti : tubeInstances) {
		if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
		if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
%>
	static <%=mt.getName()%>_t dummy_<%=mt.getName()%>_<%=tIndex%>;
	SWARM_SEND_RELATIVE(OUTPUT_<%=mt.getName().toUpperCase()%>, <%=tIndex%>,
		&dummy_<%=mt.getName()%>_<%=tIndex%>, SWARM_SIZEOF(<%=mt.getName()%>_t));
<%
		++tIndex;
			}
	}
}
%>
*/
	return 0;
}

<%for(MasterTube mt : cell.getInput()) {
	if (ProjectUtil.getReferringInstance(mt, IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(mt, SharedMemoryTube.class) != null) continue;
	Collection<Flow> flows = MasterUtil.getFlows(mt);
%>
<%if (flows.size() > 1) {%>
/*
	<%@ include file="../../com.bst.gen/template_includes/tube_comment.jet"%>
*/
int get_<%=mt.getName()%>_flow(<%=mt.getName()%>_t* hdr)
{
	SWARM_FATAL_ERROR;
	return 0;
}
<%}%>

<%
    String returnType = ProjectUtil.getReferringInstance(mt, BlockingReceiver.class) == null ? "void" : "int";
    String returnValue = ProjectUtil.getReferringInstance(mt, BlockingReceiver.class) == null ? "return" : "return 0";
%>

<%if(ProjectUtil.getReferringInstance(mt, SingleTubeHandler.class) != null) {%>

/* Using the SingleTubeHandler constraint */

<%=returnType%> <%=mt.getName()%>_handler(<%=mt.getName()%>_t* hdr)
{
	SWARM_FATAL_ERROR;
<%for(MasterTube ti : cell.getOutput()) {
%>	
	static <%=ti.getName()%>_t dummy_<%=ti.getName()%>;
<%{
		int i = 0;
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
		for(TubeInstance tInstance: tubeInstances) {
			if (ProjectUtil.getReferringInstance(tInstance.getTube(), IgnorePosixTube.class) != null) continue;
			if (ProjectUtil.getReferringInstance(tInstance.getTube(), SharedMemoryTube.class) != null) continue;
%>
	
	SWARM_SEND_RELATIVE(OUTPUT_<%=ti.getName().toUpperCase()%>, <%=i%>,
		&dummy_<%=ti.getName()%>, SWARM_SIZEOF(<%=ti.getName()%>_t));
<%       }
   }
}%>
}

<%} else {%>


<%for(Flow flow : MasterUtil.getFlows(mt)) {%>

/*
	<%@ include file="../../com.bst.gen/template_includes/tube_flow_comment.jet"%>
*/
<%=returnType%> <%=mt.getName()%>_<%=flow.getName()%>_handler(<%=mt.getName()%>_t* hdr)
{
	SWARM_FATAL_ERROR;
<%for(MasterTube ti : cell.getOutput()) {
	if(MasterUtil.getFlows(ti).contains(flow)) {
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
		CellInstance cinst = ProjectUtil.getReferringInstance(cell, CellInstance.class);
		if (cinst != null)
			tubeInstances.retainAll(cinst.getOutput());
		int tIndex = 0;
		for(TubeInstance tInstance: tubeInstances) {
			if (ProjectUtil.getReferringInstance(tInstance.getTube(), IgnorePosixTube.class) != null) continue;
			if (ProjectUtil.getReferringInstance(tInstance.getTube(), SharedMemoryTube.class) != null) continue;
%>
	static <%=ti.getName()%>_t dummy_<%=ti.getName()%>_<%=tIndex%>_<%=flow.getName()%>;
	SWARM_SEND_RELATIVE(OUTPUT_<%=ti.getName().toUpperCase()%>, <%=tIndex%>,
		&dummy_<%=ti.getName()%>_<%=tIndex%>_<%=flow.getName()%>, SWARM_SIZEOF(<%=ti.getName()%>_t));
<%
			++tIndex;
		}
	}
}%>
}

<%}%>
<%} // SingleTubeHandler %>
<%}%>

