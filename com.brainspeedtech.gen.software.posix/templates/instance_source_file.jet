<%@ jet package="com.brainspeedtech.gen.software.posix"
	class="InstanceSourceFile" 
	imports ="java.util.* 
	com.brainspeedtech.swarm.layer.util.* 
	com.brainspeedtech.swarm.layer.* 
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.constraint.software.*
	com.brainspeedtech.constraint.software.posix.*
	com.brainspeedtech.swarm.master.util.*
	com.brainspeedtech.swarm.project.util.*
	com.brainspeedtech.swarm.flow.*
	com.brainspeedtech.swarm.master.*
	org.eclipse.emf.ecore.*
	com.brainspeedtech.struct.*
	com.brainspeedtech.struct.util.*
	com.brainspeedtech.swarm.layer.*
	com.brainspeedtech.swarm.layer.util.*;"
%>
<%@ include file="ccopyright.jet"%>
<%CellInstance instance = (CellInstance) argument;
  Instance designInstance = (Instance)instance.eContainer();
  
  Set<SharedVariable> sharedVariables = new HashSet<SharedVariable>();
  sharedVariables.addAll(ProjectUtil.getReferringInstances(instance, SharedVariable.class));
  sharedVariables.addAll(ProjectUtil.getReferringInstances(instance.getCell(), SharedVariable.class));
  Set<SharedMemoryTube> sharedMemoryTubes = new HashSet<SharedMemoryTube>();
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(instance.getCell().getInput(), SharedMemoryTube.class));
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(instance.getCell().getOutput(), SharedMemoryTube.class));
  
  Map<TubeInstance, SocketTube> serverSocketTubes = PosixUtil.getServerSocketTubes(instance);
  Map<TubeInstance, SocketTube> clientSocketTubes = PosixUtil.getClientSocketTubes(instance);
  Set<TubeInstance> pipeInputs = new HashSet<TubeInstance>();
  pipeInputs.addAll(instance.getInput());
  pipeInputs.removeAll(serverSocketTubes.keySet());
  pipeInputs.removeAll(clientSocketTubes.keySet());
  Set<TubeInstance> pipeOutputs = new HashSet<TubeInstance>();
  pipeOutputs.addAll(instance.getOutput());
  pipeOutputs.removeAll(serverSocketTubes.keySet());
  pipeOutputs.removeAll(clientSocketTubes.keySet());
  
%>

#include <sys/select.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <sched.h>
#include <stdint.h>
#include <sys/mman.h>
#include <semaphore.h>
#include <signal.h>
#include "gen_<%=instance.getName()%>.h"

const char* taskname = "<%=instance.getName()%>";
const char* log_file_name = "log__<%=instance.getName()%>_circ_0";
const char* log_file_name_second = "log__<%=instance.getName()%>_circ_1";

char name_buffer[4096];

<%
Collection<Counter> counters = ProjectUtil.getReferringInstances(instance.getCell(), Counter.class);
counters.addAll(ProjectUtil.getReferringInstances(instance.getCell().getInput(), TubeReceiveCounter.class));
counters.addAll(ProjectUtil.getReferringInstances(instance.getCell().getOutput(), TubeTransmitCounter.class));

if(counters.size() != 0) {
%>
<%=instance.getCell().getName()%>_counters_t *counter_file;
<%}%>

<%for(SharedVariable svar: sharedVariables) {%>
<%=svar.getStruct().getName()%>_t* <%=svar.getName()%>;
sem_t *mem_init_<%=svar.getName()%>_sem;
<%}%>
<%for(SharedMemoryTube svar: sharedMemoryTubes) {
	Collection<MasterTube> tubes = new HashSet<MasterTube>(instance.getCell().getInput());
	Collection<MasterTube> sharedTubes = new HashSet<MasterTube>(svar.getTube());
	tubes.addAll(instance.getCell().getOutput());
	sharedTubes.retainAll(tubes);
	
	Collection<TubeInstance> instTubes = new LinkedList<TubeInstance>(instance.getOutput());
	instTubes.addAll(instance.getInput());

	Set<Integer> instanceUsed = new HashSet<Integer>();	
	for(TubeInstance ti: instTubes) {
		if(!sharedTubes.contains(ti.getTube())) continue;
		if(instanceUsed.contains(ti.getInstance())) continue;
%>
<%=svar.getStruct().getName()%>_t* <%=svar.getName()%>_<%=instanceUsed.size()%>;
sem_t *mem_init_<%=svar.getName()%>_<%=instanceUsed.size()%>_sem;
<%		instanceUsed.add(ti.getInstance());
 	}
%>
<%}%>

<%for(MasterTube ti: instance.getCell().getOutput()) {
	if (ProjectUtil.getReferringInstance(ti, IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti, SharedMemoryTube.class) != null) continue;
	Set<TubeInstance> childTubes = new HashSet<TubeInstance>();
	childTubes.addAll(ProjectUtil.getReferringInstances(ti, TubeInstance.class));
	childTubes.retainAll(instance.getOutput());%>
fd_pair_t* <%=ti.getName()%>_output_instances[<%=childTubes.size()%>];
<%}%>

<%for(MasterTube ti: instance.getCell().getInput()) {
	if (ProjectUtil.getReferringInstance(ti, IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti, SharedMemoryTube.class) != null) continue;
	Set<TubeInstance> childTubes = new HashSet<TubeInstance>();
	childTubes.addAll(ProjectUtil.getReferringInstances(ti, TubeInstance.class));
	childTubes.retainAll(instance.getInput());%>
fd_pair_t* <%=ti.getName()%>_input_instances[<%=childTubes.size()%>];
<%}%>

<%for(TubeInstance ti : serverSocketTubes.keySet()) {%>
int listen_<%=ti.getName()%> = 0;
<%}%>
<%for(TubeInstance ti : clientSocketTubes.keySet()) {%>
int connect_<%=ti.getName()%> = 0;
<%}%>

<%for(TubeInstance ti : instance.getInput()) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
%>
<%=ti.getTube().getName()%>_t <%=ti.getName()%>;
<%}%>

<%for(TubeInstance ti : instance.getInput()) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
%>
fd_pair_t INPUT_<%=ti.getName().toUpperCase()%> = { -1, -1, 0 };
<%}%>

<%for(TubeInstance ti : instance.getOutput()) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
%>
fd_pair_t OUTPUT_<%=ti.getName().toUpperCase()%> = { -1, -1, 0 };
<%}%>

int work_dir_fd;

void terminate_all()
{
		
<%for(TubeInstance ti: serverSocketTubes.keySet()) {
	if (serverSocketTubes.get(ti).isClientReceiver()) {
%>
	if(OUTPUT_<%=ti.getName().toUpperCase()%>.fd != -1) {
		close(OUTPUT_<%=ti.getName().toUpperCase()%>.fd);
	}
<%  } else { %>
	if(INPUT_<%=ti.getName().toUpperCase()%>.fd != -1) {
		close(INPUT_<%=ti.getName().toUpperCase()%>.fd);
	}
<%	}
}%>
<%for(TubeInstance ti: clientSocketTubes.keySet()) {
	if (clientSocketTubes.get(ti).isClientReceiver()) {
%>
	if(INPUT_<%=ti.getName().toUpperCase()%>.fd != -1) {
		close(INPUT_<%=ti.getName().toUpperCase()%>.fd);
	}
<%  } else { %>
	if(OUTPUT_<%=ti.getName().toUpperCase()%>.fd != -1) {
		close(OUTPUT_<%=ti.getName().toUpperCase()%>.fd);
	}
<%	}
}%>
}

extern int log_file_size;

void kill_handler(int signum)
{
	swarm_print(0, "<%=instance.getName()%> Received signal %d, exiting \n", signum);
	exit(-1);
}

int main(int argc, char* argv[])
{
	char* program_instance_name = argv[2];
	int iofd;
	int32_t read_size;
	int call_idle = 1;
	int nfds;
	int mem_file;

	log_file_size = atoi(argv[1]);

<%if(!serverSocketTubes.isEmpty() || !clientSocketTubes.isEmpty() ) {%>
	fd_set listenfdset;
	fd_set connectfdset;
	int total_connections;
<%}%>

	atexit(terminate_all);
	signal(SIGINT, kill_handler);
	signal(SIGTERM, kill_handler);
	

	work_dir_fd = open(program_instance_name, 0);
	if (work_dir_fd < 0) {
		perror("Error opening work directory");
		exit(-1);
	}
	
	// Setup all read pipes
<%for(TubeInstance ti: pipeInputs) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
%>
	swarm_print(0, "Setting up tube <%=ti.getName()%>\n");
	iofd = openat(work_dir_fd, "fifo_<%=ti.getName()%>", O_RDONLY | O_NONBLOCK);
	if (iofd < 0) {
		perror("Error opening fifo fifo_<%=ti.getName()%>");
		exit(-1);
	}
	INPUT_<%=ti.getName().toUpperCase()%>.fd = iofd;
<%
	}
%>

<%for(TubeInstance ti: pipeOutputs) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
	QueueDepth qd = ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class);
	BufferDepth bd = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
	long bufferDepth = (qd != null) ? qd.getDepth() : ((bd != null) ? bd.getDepth() : 0);
	if (bufferDepth == 0) continue;
	String strBufferDepth = Long.toString(bufferDepth);
	if(bd != null) strBufferDepth += "*sizeof(" + ti.getTube().getName() + "_t)";
%>
	swarm_print(0, "Setting up credit tube <%=ti.getName()%>\n");
	iofd = openat(work_dir_fd, "fifo_<%=ti.getName()%>_credit", O_RDONLY | O_NONBLOCK);
	if (iofd < 0) {
		perror("Error opening fifo fifo_<%=ti.getName()%>_credit");
		exit(-1);
	}
	OUTPUT_<%=ti.getName().toUpperCase()%>.credit_fd = iofd;
	OUTPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=strBufferDepth%>;
<%
	}
%>

	// Setup all server sockets
<%for(TubeInstance ti : serverSocketTubes.keySet()) {
	if(serverSocketTubes.get(ti) instanceof TCPSocketTube) {
	TCPSocketTube socketTube = (TCPSocketTube)serverSocketTubes.get(ti);
%>
	iofd = swarm_tcp_server_socket("<%=ti.getName()%>", "<%=socketTube.getServerIP()%>", <%=socketTube.getServerPort()%> + getuid());
	listen_<%=ti.getName()%> = iofd;
<%}%>
<%
	if(serverSocketTubes.get(ti) instanceof UnixSocketTube) {
	UnixSocketTube socketTube = (UnixSocketTube)serverSocketTubes.get(ti);
%>
	iofd = swarm_unix_server_socket("<%=socketTube.getName()%>", program_instance_name);
	listen_<%=ti.getName()%> = iofd;
<%}%>
<%}%>

	// Setup all write pipes
<%for(TubeInstance ti: pipeOutputs) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
%>
	swarm_print(0, "Setting up tube <%=ti.getName()%>\n");
	iofd = openat(work_dir_fd, "fifo_<%=ti.getName()%>", O_WRONLY);
	if (iofd < 0) {
		perror("Error opening fifo fifo_<%=ti.getName()%>");
		exit(-1);
	}
	if(fcntl(iofd, F_SETFL, fcntl(iofd, F_GETFL) | O_NONBLOCK) < 0) {
		perror("Could not set non blocking flag for <%=ti.getName()%>");
		exit(-1);
	}
	OUTPUT_<%=ti.getName().toUpperCase()%>.fd = iofd;
<%
	}
%>

	// Setup all credit write pipes
<%for(TubeInstance ti: pipeInputs) {
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
	QueueDepth qd = ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class);
	BufferDepth bd = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
	long bufferDepth = (qd != null) ? qd.getDepth() : ((bd != null) ? bd.getDepth() : 0);
	if (bufferDepth == 0) continue;
	String strBufferDepth = Long.toString(bufferDepth);
	if(bd != null) strBufferDepth += "*sizeof(" + ti.getTube().getName() + "_t)";
	
%>
	swarm_print(0, "Setting up tube <%=ti.getName()%>_credit\n");
	iofd = openat(work_dir_fd, "fifo_<%=ti.getName()%>_credit", O_WRONLY);
	if (iofd < 0) {
		perror("Error opening fifo fifo_<%=ti.getName()%>");
		exit(-1);
	}
	INPUT_<%=ti.getName().toUpperCase()%>.credit_fd = iofd;
	INPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=strBufferDepth%>;
<%
	}
%>



	// Setup all client sockets
<%for(TubeInstance ti : clientSocketTubes.keySet()) {
	if (clientSocketTubes.get(ti) instanceof TCPSocketTube) {
	TCPSocketTube socketTube = (TCPSocketTube)clientSocketTubes.get(ti);
%>
	iofd = swarm_tcp_client_socket("<%=ti.getName()%>", "<%=socketTube.getServerIP()%>", <%=socketTube.getServerPort()%> + getuid());
<%}%>
<%
	if (clientSocketTubes.get(ti) instanceof UnixSocketTube) {
	UnixSocketTube socketTube = (UnixSocketTube)clientSocketTubes.get(ti);
%>
	iofd = swarm_unix_client_socket("<%=socketTube.getName()%>", program_instance_name);
<%}%>
	if(fcntl(iofd, F_SETFL, fcntl(iofd, F_GETFL) | O_NONBLOCK ) < 0) {
		perror("Could not set non blocking flag for <%=ti.getName()%>");
		exit(-1);
	}
	connect_<%=ti.getName()%> = iofd;
<%}%>

	// Finish accept on servers and connects on client sockets
<%if(!serverSocketTubes.isEmpty() || !clientSocketTubes.isEmpty() ) {%>
	total_connections = <%=serverSocketTubes.size() + clientSocketTubes.size()%>;
	while(total_connections) {
		FD_ZERO(&listenfdset);
		FD_ZERO(&connectfdset);
		nfds = 0;
		
<%for(TubeInstance ti: serverSocketTubes.keySet()) {
	if (serverSocketTubes.get(ti).isClientReceiver()) {
%>
		if(OUTPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			FD_SET(listen_<%=ti.getName()%>, &listenfdset);
			if (nfds <= listen_<%=ti.getName()%>)
				nfds = listen_<%=ti.getName()%> + 1;
		}
<%  } else { %>
		if(INPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			FD_SET(listen_<%=ti.getName()%>, &listenfdset);
			if (nfds <= listen_<%=ti.getName()%>)
				nfds = listen_<%=ti.getName()%> + 1;
			
		}
<%
	}
}%>

<%for(TubeInstance ti: clientSocketTubes.keySet()) {
	if (clientSocketTubes.get(ti).isClientReceiver()) {
%>
		if(INPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			FD_SET(connect_<%=ti.getName()%>, &connectfdset);
			if (nfds <= connect_<%=ti.getName()%>)
				nfds = connect_<%=ti.getName()%> + 1;
		}
<%  } else { %>
		if(OUTPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			FD_SET(connect_<%=ti.getName()%>, &connectfdset);
			if (nfds <= connect_<%=ti.getName()%>)
				nfds = connect_<%=ti.getName()%> + 1;
		}
<%
	}
}%>

		if(select(nfds, &listenfdset, &connectfdset, NULL, NULL) < 0) {
			perror("Error in socket connection establishment");
			exit(-1);
		}
		
		
<%for(TubeInstance ti: serverSocketTubes.keySet()) {
	if (serverSocketTubes.get(ti).isClientReceiver()) {
%>
		if(OUTPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			if(FD_ISSET(listen_<%=ti.getName()%>, &listenfdset)) {
				iofd = OUTPUT_<%=ti.getName().toUpperCase()%>.fd = 
					accept(listen_<%=ti.getName()%>, NULL, NULL);
<%
	QueueDepth qd = ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class);
	BufferDepth bd = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
	long bufferDepth = (qd != null) ? qd.getDepth() : ((bd != null) ? bd.getDepth() : 0);
	if (bufferDepth != 0) {
		String strBufferDepth = Long.toString(bufferDepth);
		if(bd != null) strBufferDepth += "*sizeof(" + ti.getTube().getName() + "_t)";
	
%>
				OUTPUT_<%=ti.getName().toUpperCase()%>.credit_fd = iofd;
				OUTPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=strBufferDepth%>;
<%}%>
				if(fcntl(iofd, F_SETFL, fcntl(iofd, F_GETFL) | O_NONBLOCK) < 0) {
					perror("Could not set non blocking flag for <<%=ti.getName()%>");
					exit(-1);
				}
				close(listen_<%=ti.getName()%>);		
				swarm_print(0, "Server connected on socket tube <%=ti.getName()%>\n");
				--total_connections;
			}
		}
<%  } else { %>
		if(INPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			if(FD_ISSET(listen_<%=ti.getName()%>, &listenfdset)) {
				iofd = INPUT_<%=ti.getName().toUpperCase()%>.fd = 
					accept(listen_<%=ti.getName()%>,NULL, NULL);
<%
	QueueDepth qd = ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class);
	BufferDepth bd = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
	long bufferDepth = (qd != null) ? qd.getDepth() : ((bd != null) ? bd.getDepth() : 0);
	if (bufferDepth != 0) {
		String strBufferDepth = Long.toString(bufferDepth);
		if(bd != null) strBufferDepth += "*sizeof(" + ti.getTube().getName() + "_t)";
	
%>
				INPUT_<%=ti.getName().toUpperCase()%>.credit_fd = iofd;
				INPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=strBufferDepth%>;
<%}%>
				if(fcntl(iofd, F_SETFL, fcntl(iofd, F_GETFL) | O_NONBLOCK) < 0) {
					perror("Could not set non blocking flag for <%=ti.getName()%>");
					exit(-1);
				}
				close(listen_<%=ti.getName()%>);		
				swarm_print(0, "Server connected on socket tube <%=ti.getName()%>\n"); 
		
				--total_connections;
			}
		}
<%
	}
}%>

<%for(TubeInstance ti: clientSocketTubes.keySet()) {
	if (clientSocketTubes.get(ti).isClientReceiver()) {
%>
		if(INPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			if(FD_ISSET(connect_<%=ti.getName()%>, &connectfdset)) {
				INPUT_<%=ti.getName().toUpperCase()%>.fd = connect_<%=ti.getName()%>;
<%
	QueueDepth qd = ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class);
	if (qd != null) {
%>
				INPUT_<%=ti.getName().toUpperCase()%>.credit_fd = INPUT_<%=ti.getName().toUpperCase()%>.fd;
				INPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=qd.getDepth()%>;
<%}%>
<%
	BufferDepth bd = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
	if (bd != null) {
%>
				INPUT_<%=ti.getName().toUpperCase()%>.credit_fd = INPUT_<%=ti.getName().toUpperCase()%>.fd;
				INPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=bd.getDepth()%> * sizeof(<%=ti.getName()%>);
<%}%>
				--total_connections;
				swarm_print(0, "Client connected on socket tube <%=ti.getName()%>\n");
			}
		}
<%  } else { %>
		if(OUTPUT_<%=ti.getName().toUpperCase()%>.fd == -1) {
			if(FD_ISSET(connect_<%=ti.getName()%>, &connectfdset)) {
				OUTPUT_<%=ti.getName().toUpperCase()%>.fd = connect_<%=ti.getName()%>;
<%
	QueueDepth qd = ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class);
	if (qd != null) {
%>
				OUTPUT_<%=ti.getName().toUpperCase()%>.credit_fd = OUTPUT_<%=ti.getName().toUpperCase()%>.fd;
				OUTPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=qd.getDepth()%>;
<%}%>
<%
	BufferDepth bd = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
	if (bd != null) {
%>
				OUTPUT_<%=ti.getName().toUpperCase()%>.credit_fd = OUTPUT_<%=ti.getName().toUpperCase()%>.fd;
				OUTPUT_<%=ti.getName().toUpperCase()%>.init_credits = <%=bd.getDepth()%> * sizeof(<%=ti.getName()%>);
<%}%>
				--total_connections;
				swarm_print(0, "Client connected on socket tube <%=ti.getName()%>\n");
			}
		}
<%
	}
}%>

	}
<%}%>
	// Map shared memories
	
<%for(SharedVariable svar: sharedVariables) {
int varInstanceCount = 0;
for(MasterCell mc: svar.getMasterCell()) {
	int icCount = ProjectUtil.getReferringInstances(mc, CellInstance.class).size();
	if (icCount > varInstanceCount) varInstanceCount = icCount;
}
%>
	mem_file = openat(work_dir_fd, "mem__<%=svar.getName()%>_<%=(instance.getInstance()%varInstanceCount)%>", O_RDWR);
	if (mem_file < 0) {
		perror("Error creating memfile mem__<%=svar.getName()%>_<%=(instance.getInstance()%varInstanceCount)%>");
		exit(-1);
	}
	<%=svar.getName()%> = (<%=svar.getStruct().getName()%>_t*)mmap(NULL, 
		sizeof(<%=svar.getStruct().getName()%>_t) * <%=svar.getCount()%>, PROT_READ | PROT_WRITE,
		MAP_SHARED, mem_file, 0);
	if (<%=svar.getName()%> == NULL) {
		perror("Error mapping memfile mem__<%=svar.getName()%>_<%=(instance.getInstance()%varInstanceCount)%>");
		exit(-1);
	}
	sprintf(name_buffer, "/%d_%s_sem_<%=svar.getName()%>_init", getuid(), program_instance_name);
	mem_init_<%=svar.getName()%>_sem = sem_open(name_buffer, 0, S_IRUSR | S_IWUSR, 0);
	if (mem_init_<%=svar.getName()%>_sem == NULL) {
		perror("Error opening semaphore mem_init_<%=svar.getName()%>_sem");
		exit(-1);
	}

<%}%>


<%for(SharedMemoryTube svar: sharedMemoryTubes) {
	Collection<MasterTube> tubes = new HashSet<MasterTube>(instance.getCell().getInput());
	Collection<MasterTube> sharedTubes = new HashSet<MasterTube>(svar.getTube());
	tubes.addAll(instance.getCell().getOutput());
	sharedTubes.retainAll(tubes);
	
	Collection<TubeInstance> instTubes = new LinkedList<TubeInstance>(instance.getOutput());
	instTubes.addAll(instance.getInput());

	Set<Integer> instanceUsed = new HashSet<Integer>();	
	for(TubeInstance ti: instTubes) {
		if(!sharedTubes.contains(ti.getTube())) continue;
		if(instanceUsed.contains(ti.getInstance())) continue;
%>
	mem_file = openat(work_dir_fd, "mem__<%=svar.getName()%>_<%=ti.getInstance()%>", O_RDWR);
	if (mem_file < 0) {
		perror("Error creating memfile mem__<%=svar.getName()%>_<%=(ti.getInstance())%>");
		exit(-1);
	}
	<%=svar.getName()%>_<%=instanceUsed.size()%> = (<%=svar.getStruct().getName()%>_t*)mmap(NULL, 
		sizeof(<%=svar.getStruct().getName()%>_t), PROT_READ | PROT_WRITE,
		MAP_SHARED, mem_file, 0);
	if (<%=svar.getName()%>_<%=instanceUsed.size()%> == NULL) {
		perror("Error mapping memfile mem__<%=svar.getName()%>_<%=(ti.getInstance())%>");
		exit(-1);
	}
	sprintf(name_buffer, "/%d_%s_sem_<%=svar.getName()%>_<%=ti.getInstance()%>_init", getuid(), program_instance_name);
	mem_init_<%=svar.getName()%>_<%=instanceUsed.size()%>_sem = sem_open(name_buffer, 0, S_IRUSR | S_IWUSR, 0);
	if (mem_init_<%=svar.getName()%>_<%=instanceUsed.size()%>_sem == NULL) {
		perror("Error opening semaphore mem_init_<%=svar.getName()%>_<%=ti.getInstance()%>_sem");
		exit(-1);
	}
<%		instanceUsed.add(ti.getInstance());
 	}
}%>

<%
if(counters.size() != 0) {
%>
    mem_file = openat(work_dir_fd, "counter__<%=instance.getName()%>", O_RDWR);
    if (mem_file < 0) {
        perror("Error creating memfile counter__<%=instance.getName()%>");
        exit(-1);
    }
    counter_file = (<%=instance.getCell().getName()%>_counters_t*)mmap(NULL, 
        sizeof(<%=instance.getCell().getName()%>_counters_t), PROT_READ | PROT_WRITE,
        MAP_SHARED, mem_file, 0);
    if (counter_file == NULL) {
        perror("Error mapping memfile counter__<%=instance.getName()%>");
        exit(-1);
    }
<%}%>



<%
Map<MasterTube, Integer> indexMap = new HashMap<MasterTube, Integer>();
for(TubeInstance ti : instance.getInput()) {
	if(ProjectUtil.getReferringInstance(ti.getTube(), Tap.class) != null &&
		ProjectUtil.getReferringInstance(ti.getTube(), Tap.class).getCell() == instance.getCell()) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
	if(!indexMap.containsKey(ti.getTube())) indexMap.put(ti.getTube(),new Integer(0));
	int i = indexMap.get(ti.getTube()).intValue();
%>
	<%=ti.getTube().getName()%>_input_instances[<%=i%>] = &INPUT_<%=ti.getName().toUpperCase()%>;
<%
	i++;
	indexMap.put(ti.getTube(),new Integer(i));
}
indexMap = new HashMap<MasterTube, Integer>();
for(TubeInstance ti : instance.getOutput()) {
	if(ProjectUtil.getReferringInstance(ti.getTube(), Tap.class) != null &&
		ProjectUtil.getReferringInstance(ti.getTube(), Tap.class).getCell() == instance.getCell()) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
	if(!indexMap.containsKey(ti.getTube())) indexMap.put(ti.getTube(),new Integer(0));
	int i = indexMap.get(ti.getTube()).intValue();
%>
	<%=ti.getTube().getName()%>_output_instances[<%=i%>] = &OUTPUT_<%=ti.getName().toUpperCase()%>;
<%
	i++;
	indexMap.put(ti.getTube(),new Integer(i));
	}
%>

	swarm_print(0, "All queues created\n");
	
<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/shared_mem_init_call.jet"%>

<%for(SharedVariable svar: sharedVariables) {
	if(instance.getCell() == svar.getMasterCell().get(0)) {
%>
		sem_post(mem_init_<%=svar.getName()%>_sem);
<%	} 
} %>

<%for(SharedMemoryTube svar: sharedMemoryTubes) {
	Collection<MasterTube> tubes = new HashSet<MasterTube>(instance.getCell().getInput());
	Collection<MasterTube> sharedTubes = new HashSet<MasterTube>(svar.getTube());
	tubes.addAll(instance.getCell().getOutput());
	sharedTubes.retainAll(tubes);
	
	Collection<TubeInstance> instTubes = new LinkedList<TubeInstance>(instance.getOutput());
	instTubes.addAll(instance.getInput());

	Set<Integer> instanceUsed = new HashSet<Integer>();	
	for(TubeInstance ti: instTubes) {
		if(!sharedTubes.contains(ti.getTube())) continue;
		if(instanceUsed.contains(ti.getInstance())) continue;
%>
<%	if(instance.getCell().getOutput().contains(svar.getTube().get(0))) {%>
		sem_post(mem_init_<%=svar.getName()%>_<%=instanceUsed.size()%>_sem);	
<%  }%>

<%		instanceUsed.add(ti.getInstance());
 	}
}%>

<%for(SharedVariable svar: sharedVariables) {
	if(instance.getCell() != svar.getMasterCell().get(0)) {
%>
		sem_wait(mem_init_<%=svar.getName()%>_sem);
		sem_post(mem_init_<%=svar.getName()%>_sem);
<%	} 
} %>

<%for(SharedMemoryTube svar: sharedMemoryTubes) {
	Collection<MasterTube> tubes = new HashSet<MasterTube>(instance.getCell().getInput());
	Collection<MasterTube> sharedTubes = new HashSet<MasterTube>(svar.getTube());
	tubes.addAll(instance.getCell().getOutput());
	sharedTubes.retainAll(tubes);
	
	Collection<TubeInstance> instTubes = new LinkedList<TubeInstance>(instance.getOutput());
	instTubes.addAll(instance.getInput());

	Set<Integer> instanceUsed = new HashSet<Integer>();	
	for(TubeInstance ti: instTubes) {
		if(!sharedTubes.contains(ti.getTube())) continue;
		if(instanceUsed.contains(ti.getInstance())) continue;
%>
<%	if(!instance.getCell().getOutput().contains(svar.getTube().get(0))) {%>
		sem_wait(mem_init_<%=svar.getName()%>_<%=instanceUsed.size()%>_sem);
		sem_post(mem_init_<%=svar.getName()%>_<%=instanceUsed.size()%>_sem);
<%  }%>

<%		instanceUsed.add(ti.getInstance());
 	}
}%>

	call_idle = <%=instance.getCell().getName()%>_init();
	
<%  if (ProjectUtil.getReferringInstance(instance, CustomInstanceCell.class) == null &&
		ProjectUtil.getReferringInstance(instance.getCell(), CustomMasterCell.class) == null) {
%>

<%for(TubeInstance ti : instance.getInput()) {
    if (ProjectUtil.getReferringInstance(instance.getCell(), Tap.class) != null &&
        ti.getTube().eContainer() != instance.getCell()) continue;  

	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
    if (ProjectUtil.getReferringInstance(ti.getTube(), CustomTube.class) != null ||
        ProjectUtil.getReferringInstance(ti.getTube(), CustomPosixTube.class) != null) continue;
%>
	INPUT_<%=ti.getName().toUpperCase()%>.pending_ptr = (char*)&<%=ti.getName()%>;
	INPUT_<%=ti.getName().toUpperCase()%>.pending_size = sizeof(<%=ti.getName()%>);
	swarm_print(0, "<%=ti.getName()%>(%d): Posting receive %p(%d) type <%=ti.getName()%>_t\n", 
		INPUT_<%=ti.getName().toUpperCase()%>.fd
		,&<%=ti.getName()%>, (int)sizeof(<%=ti.getName()%>));
<%}%>
	
	while(1) {

<%if(instance.getInput().size() > 0) {%>
		int flow;
		fd_set inputfdset;
		nfds = 0;
		int transaction_id;
		int blocking_count = 0;
		
		FD_ZERO(&inputfdset);
<%for(TubeInstance ti : instance.getInput()) {
    if (ProjectUtil.getReferringInstance(instance.getCell(), Tap.class) != null &&
        ti.getTube().eContainer() != instance.getCell()) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
    if (ProjectUtil.getReferringInstance(ti.getTube(), CustomTube.class) != null ||
        ProjectUtil.getReferringInstance(ti.getTube(), CustomPosixTube.class) != null) continue;
	//if(ti.getTube().eContainer() != instance.getCell()) continue;
%>
		FD_SET(INPUT_<%=ti.getName().toUpperCase()%>.fd,
			&inputfdset);
		if (nfds <= INPUT_<%=ti.getName().toUpperCase()%>.fd) {
			nfds = INPUT_<%=ti.getName().toUpperCase()%>.fd + 1;
		}
		if(INPUT_<%=ti.getName().toUpperCase()%>.blocked) {
			++blocking_count;
		}
<%}%>
		if (!call_idle && blocking_count == 0) {
			if(select(nfds, &inputfdset, NULL, NULL, NULL) < 0) {
				perror("Error reading inputs");
				exit(-1);
			}
		}
		
<%for(TubeInstance ti : instance.getInput()) {
	//if(ti.getTube().eContainer() != instance.getCell()) continue;
    if (ProjectUtil.getReferringInstance(instance.getCell(), Tap.class) != null &&
        ti.getTube().eContainer() != instance.getCell()) continue;	
	if (ProjectUtil.getReferringInstance(ti.getTube(), IgnorePosixTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(ti.getTube(), SharedMemoryTube.class) != null) continue;
    if (ProjectUtil.getReferringInstance(ti.getTube(), CustomTube.class) != null ||
        ProjectUtil.getReferringInstance(ti.getTube(), CustomPosixTube.class) != null) continue;

	Collection<Struct> structList = MasterUtil.getDescriptors(ti.getTube());
	String descriptorPrint = "";
	for (Struct struct: structList) {
		descriptorPrint = "swarm_print_struct_" + struct.getName() + "((" + struct.getName() + "_t*)(&" + ti.getName() + "),0)";
	}
	Collection<Flow> flows = MasterUtil.getFlows(ti.getTube());
    boolean blocking = ProjectUtil.getReferringInstance(ti.getTube(), BlockingReceiver.class) != null;

%>
		if (FD_ISSET(INPUT_<%=ti.getName().toUpperCase()%>.fd,
			&inputfdset) || INPUT_<%=ti.getName().toUpperCase()%>.blocked) {
			if(!INPUT_<%=ti.getName().toUpperCase()%>.blocked) {
    			read_size = read(INPUT_<%=ti.getName().toUpperCase()%>.fd, 
    				INPUT_<%=ti.getName().toUpperCase()%>.pending_ptr,
    				INPUT_<%=ti.getName().toUpperCase()%>.pending_size);
    			if (read_size < 0) {
    				if(errno != EAGAIN && errno != EWOULDBLOCK) {
    					perror("Error reading from INPUT_<%=ti.getName().toUpperCase()%>");
    					SWARM_FATAL_ERROR;
    				}
    				read_size = 0;
    			}
    			INPUT_<%=ti.getName().toUpperCase()%>.pending_size -= read_size;
    			INPUT_<%=ti.getName().toUpperCase()%>.pending_ptr += read_size;
    			<%if(ProjectUtil.getReferringInstance(ti.getTube(), QueueDepth.class) != null ||
    				ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class) != null) {%>
    			if (read_size != 0) {
    				write_blocking("<%=ti.getName()%>", INPUT_<%=ti.getName().toUpperCase()%>.credit_fd, (char*)&read_size, sizeof(read_size));
    				//printf("Sent %d credits\n", read_size);
    			}
    			<%}%>
			}

			if(INPUT_<%=ti.getName().toUpperCase()%>.pending_size == 0) {
				SWARM_PRINT_NL(2, "-----------------------------------------------------\n");
				SWARM_PRINT_NL(2, "<%=ti.getName()%>(%d): Received data type <%=ti.getName()%>_t\n", 
					INPUT_<%=ti.getName().toUpperCase()%>.fd);
				swarm_dump_data(0, (char*)&<%=ti.getName()%>, sizeof(<%=ti.getName()%>));
				SWARM_PRINT_NL(2, "<%=ti.getName()%>(%d):descriptor:",INPUT_<%=ti.getName().toUpperCase()%>.fd); <%=descriptorPrint%>;
<%if(ProjectUtil.getReferringInstance(ti.getTube(), SingleTubeHandler.class) != null) {%>
//				if(<%=ti.getTube().getName()%>_transaction_id)
//					transaction_id = <%=ti.getTube().getName()%>_transaction_id(&<%=ti.getName()%>);
//				else transaction_id = -1;
//				if(transaction_id != -1) 
//					SWARM_PRINT_NL(2, "<%=ti.getName()%>:TRANSACTION_ID:%d\n", transaction_id);
<%if(blocking) {%>
                INPUT_<%=ti.getName().toUpperCase()%>.blocked =
<%}%>
				<%=ti.getTube().getName()%>_handler(&<%=ti.getName()%>);
<%} else {%>
<%if (flows.size() > 1) {%>
				flow = get_<%=ti.getTube().getName()%>_flow(&<%=ti.getName()%>);
				switch(flow) {
<%}%>
<%for(Flow flow: MasterUtil.getFlows(ti.getTube())) {%>
<%if (flows.size() > 1) {%>
					case ENUM_<%=flow.getName().toUpperCase()%>_FLOW:
<%}%>
						SWARM_PRINT_NL(2, "Processing flow <%=flow.getName().toUpperCase()%>\n");
//						if(<%=ti.getTube().getName()%>_<%=flow.getName()%>_transaction_id)
//							transaction_id = <%=ti.getTube().getName()%>_<%=flow.getName()%>_transaction_id(&<%=ti.getName()%>);
//						if(<%=ti.getTube().getName()%>_transaction_id)
//							transaction_id = <%=ti.getTube().getName()%>_transaction_id(&<%=ti.getName()%>);
//						else transaction_id = -1;
//						if(transaction_id != -1) 
//							SWARM_PRINT_NL(2, "<%=ti.getName()%>:<%=flow.getName()%>:TRANSACTION_ID:%d\n", transaction_id);
<%if(blocking) {%>
                        INPUT_<%=ti.getName().toUpperCase()%>.blocked =
<%}%>
						<%=ti.getTube().getName()%>_<%=flow.getName()%>_handler(&<%=ti.getName()%>);
<%if (flows.size() > 1) {%>
						break;
<%}%> 
<%}%> 
<%if (flows.size() > 1) {%>
					default:
						SWARM_PRINT("Bad flow %s(%d) in cell instance <%=instance.getName()%> -><%=ti.getName()%>\n",
							gen_<%=designInstance.getName()%>_flow_string(flow), flow);
						SWARM_FATAL_ERROR;
						break;
				}
<%}%> 
<%}%>

<%if(blocking) {%>
                if(!INPUT_<%=ti.getName().toUpperCase()%>.blocked) {
<%}%>
<%
    			TubeReceiveCounter rcounter = ProjectUtil.getReferringInstance(ti.getTube(), TubeReceiveCounter.class);
    			if(rcounter != null) {%>
    			COUNTER_<%=rcounter.getName().toUpperCase()%>_INC;
<%}%>
				INPUT_<%=ti.getName().toUpperCase()%>.pending_ptr = (char*)&<%=ti.getName()%>;
				INPUT_<%=ti.getName().toUpperCase()%>.pending_size = sizeof(<%=ti.getName()%>);
				SWARM_PRINT_NL(2, "<%=ti.getName()%>(%d): Posting receive %p(%d) type <%=ti.getName()%>_t\n", 
					INPUT_<%=ti.getName().toUpperCase()%>.fd
					,&<%=ti.getName()%>, (int)sizeof(<%=ti.getName()%>));
<%if(blocking) {%>
                }
<%}%>
				call_idle = 1;
			} 
		}
<%}%>
		if (call_idle) {
			call_idle = <%=instance.getCell().getName()%>_idle();
			sched_yield();
		}
<%} else {%>
		if (call_idle) {
			call_idle = <%=instance.getCell().getName()%>_idle();
			sched_yield();
		}
		sched_yield();
<%}%>
	}

<%}%>
	return 0;
}


