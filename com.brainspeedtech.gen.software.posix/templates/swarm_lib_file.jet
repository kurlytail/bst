<%@ jet package="com.brainspeedtech.gen.software.posix"
	class="SwarmLibFile" 
	imports ="org.eclipse.emf.ecore.*
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.swarm.project.util.*;"
%>
<%@ include file="ccopyright.jet"%>
<%Instance instance = (Instance) argument;%>

#ifndef __GEN__<%=instance.getName().toUpperCase()%>_SWARM_LIB_H__
#define __GEN__<%=instance.getName().toUpperCase()%>_SWARM_LIB_H__

#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <stdint.h>

#define <%=instance.getName().toUpperCase()%>_USE_NATIVE_UINT64

#define SWARM_PASTE(__token1__, __token2__) __token1__ ## __token2__


typedef struct {
	int fd;
	int credit_fd;
	int32_t init_credits;
	char* pending_ptr;
	size_t pending_size;
	int blocked;
} fd_pair_t;


extern void swarm_dump_data_nl(int level, unsigned int addr, char* data, size_t length);
#define swarm_dump_data(__addr__, __data__, __length__) swarm_dump_data_nl(0, __addr__, __data__, __length__)
extern void swarm_read_fd(const char* name, fd_pair_t* fd, int printlog, int nonblocking);
extern void swarm_write_fd(const char* name, fd_pair_t*, int printlog, int nonblocking);
extern int swarm_tcp_client_socket(const char* name, const char* host, int port);
extern int swarm_tcp_server_socket(const char* name, const char* host, int port);
extern int swarm_unix_client_socket(const char* name, const char* work_dir);
extern int swarm_unix_server_socket(const char* name, const char* work_dir);
extern void write_blocking(const char* name, int fd, char* buffer, size_t buffer_size);
extern int read_blocking(const char* name, int fd, char* buffer, size_t buffer_size, int nonblocking);
void swarm_generate_random_data(uint8_t* data, uint32_t length);
void swarm_generate_sequential_data(uint8_t* data, uint32_t length);
extern void swarm_fifo_thread(fd_pair_t* input, fd_pair_t* output);

#define SWARM_POSIX_FIFO_THREAD(__input_fd__, __output_fd__) swarm_fifo_thread(&(__input_fd__ ## _MAPPED_TO_BYPASS), &(__output_fd__ ## _MAPPED_TO_BYPASS))

#define _SWARM_RECV_INTERNAL_(__queue__, __ptr__, __size__) {\
	assert(__queue__.pending_size == 0); \
	__queue__.pending_ptr = (char*)(__ptr__);\
	__queue__.pending_size = (__size__);\
	swarm_read_fd(# __queue__, &__queue__, 0, 0);\
}

#define _SWARM_SEND_INTERNAL_(__queue__, __ptr__, __size__) {\
	assert(__queue__.pending_size == 0); \
	__queue__.pending_ptr = (char*)(__ptr__);\
	__queue__.pending_size = (__size__);\
	swarm_write_fd(# __queue__, &__queue__, 0, 0);\
}

#define _SWARM_RECV_BUSY_INTERNAL_(__queue__) ({\
	swarm_read_fd(# __queue__, &__queue__, 0, 1);\
	__queue__.pending_size != 0;\
})

#define _SWARM_SEND_BUSY_INTERNAL_(__queue__) ({\
	swarm_write_fd(# __queue__, &__queue__, 0, 1);\
	__queue__.pending_size != 0 || (__queue__.credit_fd >= 0 && __queue__.init_credits == 0);\
})

#define _SWARM_RECV_INTERNAL_NONBLOCKING_(__queue__, __ptr__, __size__) {\
	assert(__queue__.pending_size == 0); \
	__queue__.pending_ptr = (char*)(__ptr__);\
	__queue__.pending_size = (__size__);\
	swarm_read_fd(# __queue__, &__queue__, 0, 1);\
}

#define _SWARM_SEND_INTERNAL_NONBLOCKING_(__queue__, __ptr__, __size__) {\
	assert(__queue__.pending_size == 0); \
	__queue__.pending_ptr = (char*)(__ptr__);\
	__queue__.pending_size = (__size__);\
	swarm_write_fd(# __queue__, &__queue__, 0, 1);\
}

#define _SWARM_RECV_INTERNAL_LOGGED_(__queue__, __ptr__, __size__) {\
	assert(__queue__.pending_size == 0); \
	__queue__.pending_ptr = (char*)(__ptr__);\
	__queue__.pending_size = (__size__);\
	swarm_read_fd(# __queue__, &__queue__, 1, 0);\
}

#define _SWARM_SEND_INTERNAL_LOGGED_(__queue__, __ptr__, __size__) {\
	assert(__queue__.pending_size == 0); \
	__queue__.pending_ptr = (char*)(__ptr__);\
	__queue__.pending_size = (__size__);\
	swarm_write_fd(# __queue__, &__queue__, 1, 0);\
}

#define SWARM_RECV(__queue__, __ptr__, __size__) SWARM_PASTE(SWARM_RECV_, __queue__)((char*)(__ptr__), (__size__))
#define SWARM_SEND(__queue__, __ptr__, __size__) SWARM_PASTE(SWARM_SEND_, __queue__)((char*)(__ptr__), (__size__))
#define SWARM_RECV_LOGGED(__queue__, __ptr__, __size__) SWARM_PASTE(SWARM_RECV_LOGGED_, __queue__)((char*)(__ptr__), (__size__))
#define SWARM_SEND_LOGGED(__queue__, __ptr__, __size__) SWARM_PASTE(SWARM_SEND_LOGGED_, __queue__)((char*)(__ptr__), (__size__))
#define SWARM_RECV_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_PASTE(SWARM_RECV_RELATIVE_, __queue__)(__instance__, (char*)(__ptr__), (__size__))
#define SWARM_SEND_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_PASTE(SWARM_SEND_RELATIVE_, __queue__)(__instance__, (char*)(__ptr__), (__size__))
#define SWARM_RECV_RELATIVE_LOGGED(__queue__, __instance__, __ptr__, __size__) SWARM_PASTE(SWARM_RECV_RELATIVE_LOGGED_, __queue__)(__instance__, (char*)(__ptr__), (__size__))
#define SWARM_SEND_RELATIVE_LOGGED(__queue__, __instance__, __ptr__, __size__) SWARM_PASTE(SWARM_SEND_RELATIVE_LOGGED_, __queue__)(__instance__, (char*)(__ptr__), (__size__))

#define SWARM_RECV_NONBLOCKING(__queue__, __ptr__, __size__) SWARM_PASTE(SWARM_RECV_NONBLOCKING_,__queue__)((__ptr__), (__size__))
#define SWARM_SEND_NONBLOCKING(__queue__, __ptr__, __size__) SWARM_PASTE(SWARM_SEND_NONBLOCKING_,__queue__)((__ptr__), (__size__))
#define SWARM_RECV_NONBLOCKING_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_PASTE(SWARM_RECV_NONBLOCKING_RELATIVE_,__queue__)((__instance__), (__ptr__), (__size__))
#define SWARM_SEND_NONBLOCKING_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_PASTE(SWARM_SEND_NONBLOCKING_RELATIVE_,__queue__)((__instance__), (__ptr__), (__size__))
#define SWARM_RECV_BUSY(__queue__) SWARM_PASTE(SWARM_RECV_BUSY_,__queue__)
#define SWARM_SEND_BUSY(__queue__) SWARM_PASTE(SWARM_SEND_BUSY_,__queue__)
#define SWARM_RECV_BUSY_RELATIVE(__queue__, __instance__) SWARM_PASTE(SWARM_RECV_BUSY_RELATIVE_,__queue__)((__instance__))
#define SWARM_SEND_BUSY_RELATIVE(__queue__, __instance__) SWARM_PASTE(SWARM_SEND_BUSY_RELATIVE_,__queue__)((__instance__))


#define SWARM_SEND_RELATIVE_EXPANDED SWARM_SEND_RELATIVE
#define SWARM_SEND_NONBLOCKING_RELATIVE_EXPANDED SWARM_SEND_NONBLOCKING_RELATIVE
#define SWARM_SEND_BUSY_RELATIVE_EXPANDED SWARM_SEND_BUSY_RELATIVE


#define SWARM_SHARED(__type__, __varname__) __type__ __varname__
#define SWARM_PRINT0(__format__) SWARM_PRINT_NL(0, __format__)
#define SWARM_PRINT1(__format__, __arg0__) SWARM_PRINT_NL(0, __format__, __arg0__)
#define SWARM_PRINT2(__format__, __arg0__, __arg1__) SWARM_PRINT_NL(0, __format__, __arg0__, __arg1__)
#define SWARM_PRINT3(__format__, __arg0__, __arg1__, __arg2__) SWARM_PRINT_NL(0, __format__, __arg0__, __arg1__, __arg2__)
#define SWARM_PRINT4(__format__, __arg0__, __arg1__, __arg2__, __arg3__) SWARM_PRINT_NL(0, __format__, __arg0__, __arg1__, __arg2__, __arg3__)
#define SWARM_PRINT(__format__, args...) SWARM_PRINT_NL(0, __format__, ## args)

extern void swarm_print(int level, const char* format, ...);

#define SWARM_PRINT_NL(__level__, __str__, args...) { \
	swarm_print(__level__, __str__, ## args);\
}

#define SWARM_FATAL_ERROR assert(0);

#define SWARM_SIZEOF sizeof

#endif
