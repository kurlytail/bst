/*******************************************************************************
 * Copyright @2011,2012,2013 BrainSpeed Technologies, http://www.brainspeedtech.com
 * Copyright @2013,2014 Medullanet Inc, http://www.medullanet.com
 * All rights reserved.
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.brainspeedtech.swarm.layer.provider;

import com.brainspeedtech.swarm.layer.LayerPackage;

import com.brainspeedtech.swarm.layer.util.LayerAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LayerItemProviderAdapterFactory extends LayerAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(LayerEditPlugin.INSTANCE, LayerPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LayerItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemColorProvider.class);
		supportedTypes.add(ITableItemFontProvider.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Association} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssociationItemProvider associationItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Association}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAssociationAdapter() {
		if (associationItemProvider == null) {
			associationItemProvider = new AssociationItemProvider(this);
		}

		return associationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.CellCounter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellCounterItemProvider cellCounterItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.CellCounter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellCounterAdapter() {
		if (cellCounterItemProvider == null) {
			cellCounterItemProvider = new CellCounterItemProvider(this);
		}

		return cellCounterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.CellInstanceCount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CellInstanceCountItemProvider cellInstanceCountItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.CellInstanceCount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCellInstanceCountAdapter() {
		if (cellInstanceCountItemProvider == null) {
			cellInstanceCountItemProvider = new CellInstanceCountItemProvider(this);
		}

		return cellInstanceCountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.ConvertMasterToSM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConvertMasterToSMItemProvider convertMasterToSMItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.ConvertMasterToSM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConvertMasterToSMAdapter() {
		if (convertMasterToSMItemProvider == null) {
			convertMasterToSMItemProvider = new ConvertMasterToSMItemProvider(this);
		}

		return convertMasterToSMItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Counter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CounterItemProvider counterItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Counter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCounterAdapter() {
		if (counterItemProvider == null) {
			counterItemProvider = new CounterItemProvider(this);
		}

		return counterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.CrossReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CrossReferenceItemProvider crossReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.CrossReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCrossReferenceAdapter() {
		if (crossReferenceItemProvider == null) {
			crossReferenceItemProvider = new CrossReferenceItemProvider(this);
		}

		return crossReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Custom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomItemProvider customItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Custom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomAdapter() {
		if (customItemProvider == null) {
			customItemProvider = new CustomItemProvider(this);
		}

		return customItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.CustomTube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTubeItemProvider customTubeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.CustomTube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTubeAdapter() {
		if (customTubeItemProvider == null) {
			customTubeItemProvider = new CustomTubeItemProvider(this);
		}

		return customTubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.ExternalCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalCellItemProvider externalCellItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.ExternalCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalCellAdapter() {
		if (externalCellItemProvider == null) {
			externalCellItemProvider = new ExternalCellItemProvider(this);
		}

		return externalCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.FileReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileReferenceItemProvider fileReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.FileReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileReferenceAdapter() {
		if (fileReferenceItemProvider == null) {
			fileReferenceItemProvider = new FileReferenceItemProvider(this);
		}

		return fileReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.FlowAnalysisAndMerge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowAnalysisAndMergeItemProvider flowAnalysisAndMergeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.FlowAnalysisAndMerge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowAnalysisAndMergeAdapter() {
		if (flowAnalysisAndMergeItemProvider == null) {
			flowAnalysisAndMergeItemProvider = new FlowAnalysisAndMergeItemProvider(this);
		}

		return flowAnalysisAndMergeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.IgnoreCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IgnoreCellItemProvider ignoreCellItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.IgnoreCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIgnoreCellAdapter() {
		if (ignoreCellItemProvider == null) {
			ignoreCellItemProvider = new IgnoreCellItemProvider(this);
		}

		return ignoreCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.IgnoreFlow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IgnoreFlowItemProvider ignoreFlowItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.IgnoreFlow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIgnoreFlowAdapter() {
		if (ignoreFlowItemProvider == null) {
			ignoreFlowItemProvider = new IgnoreFlowItemProvider(this);
		}

		return ignoreFlowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.IgnoreTube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IgnoreTubeItemProvider ignoreTubeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.IgnoreTube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIgnoreTubeAdapter() {
		if (ignoreTubeItemProvider == null) {
			ignoreTubeItemProvider = new IgnoreTubeItemProvider(this);
		}

		return ignoreTubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.InstanceTransform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstanceTransformItemProvider instanceTransformItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.InstanceTransform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstanceTransformAdapter() {
		if (instanceTransformItemProvider == null) {
			instanceTransformItemProvider = new InstanceTransformItemProvider(this);
		}

		return instanceTransformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Layer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerItemProvider layerItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Layer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerAdapter() {
		if (layerItemProvider == null) {
			layerItemProvider = new LayerItemProvider(this);
		}

		return layerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.MatchingFlows} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatchingFlowsItemProvider matchingFlowsItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.MatchingFlows}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatchingFlowsAdapter() {
		if (matchingFlowsItemProvider == null) {
			matchingFlowsItemProvider = new MatchingFlowsItemProvider(this);
		}

		return matchingFlowsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.ModelReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelReferenceItemProvider modelReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.ModelReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelReferenceAdapter() {
		if (modelReferenceItemProvider == null) {
			modelReferenceItemProvider = new ModelReferenceItemProvider(this);
		}

		return modelReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.ProjectPrefixString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectPrefixStringItemProvider projectPrefixStringItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.ProjectPrefixString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectPrefixStringAdapter() {
		if (projectPrefixStringItemProvider == null) {
			projectPrefixStringItemProvider = new ProjectPrefixStringItemProvider(this);
		}

		return projectPrefixStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.QueueDepth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueueDepthItemProvider queueDepthItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.QueueDepth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueueDepthAdapter() {
		if (queueDepthItemProvider == null) {
			queueDepthItemProvider = new QueueDepthItemProvider(this);
		}

		return queueDepthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.StreamingTube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StreamingTubeItemProvider streamingTubeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.StreamingTube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStreamingTubeAdapter() {
		if (streamingTubeItemProvider == null) {
			streamingTubeItemProvider = new StreamingTubeItemProvider(this);
		}

		return streamingTubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Tap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TapItemProvider tapItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Tap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTapAdapter() {
		if (tapItemProvider == null) {
			tapItemProvider = new TapItemProvider(this);
		}

		return tapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Template} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateItemProvider templateItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Template}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateAdapter() {
		if (templateItemProvider == null) {
			templateItemProvider = new TemplateItemProvider(this);
		}

		return templateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.TubeDescriptorLog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TubeDescriptorLogItemProvider tubeDescriptorLogItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.TubeDescriptorLog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTubeDescriptorLogAdapter() {
		if (tubeDescriptorLogItemProvider == null) {
			tubeDescriptorLogItemProvider = new TubeDescriptorLogItemProvider(this);
		}

		return tubeDescriptorLogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.TubeInstanceCount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TubeInstanceCountItemProvider tubeInstanceCountItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.TubeInstanceCount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTubeInstanceCountAdapter() {
		if (tubeInstanceCountItemProvider == null) {
			tubeInstanceCountItemProvider = new TubeInstanceCountItemProvider(this);
		}

		return tubeInstanceCountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.TubeReceiveCounter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TubeReceiveCounterItemProvider tubeReceiveCounterItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.TubeReceiveCounter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTubeReceiveCounterAdapter() {
		if (tubeReceiveCounterItemProvider == null) {
			tubeReceiveCounterItemProvider = new TubeReceiveCounterItemProvider(this);
		}

		return tubeReceiveCounterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.swarm.layer.TubeTransmitCounter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TubeTransmitCounterItemProvider tubeTransmitCounterItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.swarm.layer.TubeTransmitCounter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTubeTransmitCounterAdapter() {
		if (tubeTransmitCounterItemProvider == null) {
			tubeTransmitCounterItemProvider = new TubeTransmitCounterItemProvider(this);
		}

		return tubeTransmitCounterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (associationItemProvider != null) associationItemProvider.dispose();
		if (cellCounterItemProvider != null) cellCounterItemProvider.dispose();
		if (cellInstanceCountItemProvider != null) cellInstanceCountItemProvider.dispose();
		if (convertMasterToSMItemProvider != null) convertMasterToSMItemProvider.dispose();
		if (counterItemProvider != null) counterItemProvider.dispose();
		if (crossReferenceItemProvider != null) crossReferenceItemProvider.dispose();
		if (customItemProvider != null) customItemProvider.dispose();
		if (customTubeItemProvider != null) customTubeItemProvider.dispose();
		if (externalCellItemProvider != null) externalCellItemProvider.dispose();
		if (fileReferenceItemProvider != null) fileReferenceItemProvider.dispose();
		if (flowAnalysisAndMergeItemProvider != null) flowAnalysisAndMergeItemProvider.dispose();
		if (ignoreCellItemProvider != null) ignoreCellItemProvider.dispose();
		if (ignoreFlowItemProvider != null) ignoreFlowItemProvider.dispose();
		if (ignoreTubeItemProvider != null) ignoreTubeItemProvider.dispose();
		if (instanceTransformItemProvider != null) instanceTransformItemProvider.dispose();
		if (layerItemProvider != null) layerItemProvider.dispose();
		if (matchingFlowsItemProvider != null) matchingFlowsItemProvider.dispose();
		if (modelReferenceItemProvider != null) modelReferenceItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (projectPrefixStringItemProvider != null) projectPrefixStringItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (queueDepthItemProvider != null) queueDepthItemProvider.dispose();
		if (streamingTubeItemProvider != null) streamingTubeItemProvider.dispose();
		if (tapItemProvider != null) tapItemProvider.dispose();
		if (templateItemProvider != null) templateItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (tubeDescriptorLogItemProvider != null) tubeDescriptorLogItemProvider.dispose();
		if (tubeInstanceCountItemProvider != null) tubeInstanceCountItemProvider.dispose();
		if (tubeReceiveCounterItemProvider != null) tubeReceiveCounterItemProvider.dispose();
		if (tubeTransmitCounterItemProvider != null) tubeTransmitCounterItemProvider.dispose();
	}

}
