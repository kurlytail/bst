/*******************************************************************************
 * Copyright @2011,2012,2013 BrainSpeed Technologies, http://www.brainspeedtech.com
 * Copyright @2013,2014 Medullanet Inc, http://www.medullanet.com
 * All rights reserved.
 ******************************************************************************/
/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.brainspeedtech.constraint.software.provider;

import com.brainspeedtech.constraint.software.SoftwareFactory;

import com.brainspeedtech.constraint.software.SoftwarePackage;
import com.brainspeedtech.constraint.software.util.SoftwareAdapterFactory;

import com.brainspeedtech.swarm.layer.Layer;
import com.brainspeedtech.swarm.layer.LayerPackage;

import com.brainspeedtech.swarm.layer.provider.LayerEditPlugin;
import com.brainspeedtech.swarm.layer.util.LayerSwitch;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.util.ResourceLocator;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.edit.command.CommandParameter;

import org.eclipse.emf.edit.domain.EditingDomain;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ChildCreationExtenderManager;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IChildCreationExtender;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemColorProvider;
import org.eclipse.emf.edit.provider.ITableItemFontProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SoftwareItemProviderAdapterFactory extends SoftwareAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable, IChildCreationExtender {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This helps manage the child creation extenders.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	protected ChildCreationExtenderManager childCreationExtenderManager = new ChildCreationExtenderManager(LayerEditPlugin.INSTANCE, LayerPackage.eNS_URI);

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SoftwareItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(ITableItemColorProvider.class);
		supportedTypes.add(ITableItemFontProvider.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.BlockingReceiver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockingReceiverItemProvider blockingReceiverItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.BlockingReceiver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockingReceiverAdapter() {
		if (blockingReceiverItemProvider == null) {
			blockingReceiverItemProvider = new BlockingReceiverItemProvider(this);
		}

		return blockingReceiverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.BufferDepth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BufferDepthItemProvider bufferDepthItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.BufferDepth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBufferDepthAdapter() {
		if (bufferDepthItemProvider == null) {
			bufferDepthItemProvider = new BufferDepthItemProvider(this);
		}

		return bufferDepthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.CustomInstanceCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomInstanceCellItemProvider customInstanceCellItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.CustomInstanceCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomInstanceCellAdapter() {
		if (customInstanceCellItemProvider == null) {
			customInstanceCellItemProvider = new CustomInstanceCellItemProvider(this);
		}

		return customInstanceCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.CustomMasterCell} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomMasterCellItemProvider customMasterCellItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.CustomMasterCell}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomMasterCellAdapter() {
		if (customMasterCellItemProvider == null) {
			customMasterCellItemProvider = new CustomMasterCellItemProvider(this);
		}

		return customMasterCellItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.FileTube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileTubeItemProvider fileTubeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.FileTube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileTubeAdapter() {
		if (fileTubeItemProvider == null) {
			fileTubeItemProvider = new FileTubeItemProvider(this);
		}

		return fileTubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.IgnoreInvalidTransitions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IgnoreInvalidTransitionsItemProvider ignoreInvalidTransitionsItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.IgnoreInvalidTransitions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIgnoreInvalidTransitionsAdapter() {
		if (ignoreInvalidTransitionsItemProvider == null) {
			ignoreInvalidTransitionsItemProvider = new IgnoreInvalidTransitionsItemProvider(this);
		}

		return ignoreInvalidTransitionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.MemoryFIFO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemoryFIFOItemProvider memoryFIFOItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.MemoryFIFO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemoryFIFOAdapter() {
		if (memoryFIFOItemProvider == null) {
			memoryFIFOItemProvider = new MemoryFIFOItemProvider(this);
		}

		return memoryFIFOItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.NativeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NativeTypeItemProvider nativeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.NativeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNativeTypeAdapter() {
		if (nativeTypeItemProvider == null) {
			nativeTypeItemProvider = new NativeTypeItemProvider(this);
		}

		return nativeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.NoIdleHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoIdleHandlerItemProvider noIdleHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.NoIdleHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoIdleHandlerAdapter() {
		if (noIdleHandlerItemProvider == null) {
			noIdleHandlerItemProvider = new NoIdleHandlerItemProvider(this);
		}

		return noIdleHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.NoInitHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoInitHandlerItemProvider noInitHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.NoInitHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoInitHandlerAdapter() {
		if (noInitHandlerItemProvider == null) {
			noInitHandlerItemProvider = new NoInitHandlerItemProvider(this);
		}

		return noInitHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.SharedMemoryTube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedMemoryTubeItemProvider sharedMemoryTubeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.SharedMemoryTube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedMemoryTubeAdapter() {
		if (sharedMemoryTubeItemProvider == null) {
			sharedMemoryTubeItemProvider = new SharedMemoryTubeItemProvider(this);
		}

		return sharedMemoryTubeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.SharedVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SharedVariableItemProvider sharedVariableItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.SharedVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSharedVariableAdapter() {
		if (sharedVariableItemProvider == null) {
			sharedVariableItemProvider = new SharedVariableItemProvider(this);
		}

		return sharedVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.SingleTubeHandler} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingleTubeHandlerItemProvider singleTubeHandlerItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.SingleTubeHandler}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingleTubeHandlerAdapter() {
		if (singleTubeHandlerItemProvider == null) {
			singleTubeHandlerItemProvider = new SingleTubeHandlerItemProvider(this);
		}

		return singleTubeHandlerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.StateGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateGroupItemProvider stateGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.StateGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateGroupAdapter() {
		if (stateGroupItemProvider == null) {
			stateGroupItemProvider = new StateGroupItemProvider(this);
		}

		return stateGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.StructSizeLimit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructSizeLimitItemProvider structSizeLimitItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.StructSizeLimit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructSizeLimitAdapter() {
		if (structSizeLimitItemProvider == null) {
			structSizeLimitItemProvider = new StructSizeLimitItemProvider(this);
		}

		return structSizeLimitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.brainspeedtech.constraint.software.TCPSocketTube} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TCPSocketTubeItemProvider tcpSocketTubeItemProvider;

	/**
	 * This creates an adapter for a {@link com.brainspeedtech.constraint.software.TCPSocketTube}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTCPSocketTubeAdapter() {
		if (tcpSocketTubeItemProvider == null) {
			tcpSocketTubeItemProvider = new TCPSocketTubeItemProvider(this);
		}

		return tcpSocketTubeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public List<IChildCreationExtender> getChildCreationExtenders() {
		return childCreationExtenderManager.getChildCreationExtenders();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Collection<?> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ResourceLocator getResourceLocator() {
		return childCreationExtenderManager;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (blockingReceiverItemProvider != null) blockingReceiverItemProvider.dispose();
		if (bufferDepthItemProvider != null) bufferDepthItemProvider.dispose();
		if (customInstanceCellItemProvider != null) customInstanceCellItemProvider.dispose();
		if (customMasterCellItemProvider != null) customMasterCellItemProvider.dispose();
		if (fileTubeItemProvider != null) fileTubeItemProvider.dispose();
		if (ignoreInvalidTransitionsItemProvider != null) ignoreInvalidTransitionsItemProvider.dispose();
		if (memoryFIFOItemProvider != null) memoryFIFOItemProvider.dispose();
		if (nativeTypeItemProvider != null) nativeTypeItemProvider.dispose();
		if (noIdleHandlerItemProvider != null) noIdleHandlerItemProvider.dispose();
		if (noInitHandlerItemProvider != null) noInitHandlerItemProvider.dispose();
		if (sharedMemoryTubeItemProvider != null) sharedMemoryTubeItemProvider.dispose();
		if (sharedVariableItemProvider != null) sharedVariableItemProvider.dispose();
		if (singleTubeHandlerItemProvider != null) singleTubeHandlerItemProvider.dispose();
		if (stateGroupItemProvider != null) stateGroupItemProvider.dispose();
		if (structSizeLimitItemProvider != null) structSizeLimitItemProvider.dispose();
		if (tcpSocketTubeItemProvider != null) tcpSocketTubeItemProvider.dispose();
	}

	/**
	 * A child creation extender for the {@link LayerPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static class LayerChildCreationExtender implements IChildCreationExtender {
		/**
		 * The switch for creating child descriptors specific to each extended class.
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		protected static class CreationSwitch extends LayerSwitch<Object> {
			/**
			 * The child descriptors being populated.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected List<Object> newChildDescriptors;

			/**
			 * The domain in which to create the children.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected EditingDomain editingDomain;

			/**
			 * Creates the a switch for populating child descriptors in the given domain.
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			CreationSwitch(List<Object> newChildDescriptors, EditingDomain editingDomain) {
				this.newChildDescriptors = newChildDescriptors;
				this.editingDomain = editingDomain;
			}
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			@Override
			public Object caseLayer(Layer object) {
				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createBlockingReceiver()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createBufferDepth()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createCustomInstanceCell()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createCustomMasterCell()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createFileTube()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createIgnoreInvalidTransitions()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createMemoryFIFO()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createNativeType()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createNoIdleHandler()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createNoInitHandler()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createSharedMemoryTube()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createSharedVariable()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createSingleTubeHandler()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createStateGroup()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createStructSizeLimit()));

				newChildDescriptors.add
					(createChildParameter
						(LayerPackage.Literals.LAYER__CONSTRAINT,
						 SoftwareFactory.eINSTANCE.createTCPSocketTube()));

				return null;
			}
 
			/**
			 * <!-- begin-user-doc -->
			 * <!-- end-user-doc -->
			 * @generated
			 */
			protected CommandParameter createChildParameter(Object feature, Object child) {
				return new CommandParameter(null, feature, child);
			}

		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public Collection<Object> getNewChildDescriptors(Object object, EditingDomain editingDomain) {
			ArrayList<Object> result = new ArrayList<Object>();
		   new CreationSwitch(result, editingDomain).doSwitch((EObject)object);
		   return result;
		}

		/**
		 * <!-- begin-user-doc -->
		 * <!-- end-user-doc -->
		 * @generated
		 */
		public ResourceLocator getResourceLocator() {
			return SoftwareEditPlugin.INSTANCE;
		}
	}

}
