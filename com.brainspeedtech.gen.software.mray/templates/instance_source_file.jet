<%@ jet package="com.brainspeedtech.gen.software.mray"
	class="InstanceSourceFile" 
	imports ="java.util.*
	com.brainspeedtech.swarm.layer.*
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.swarm.master.*
	com.brainspeedtech.swarm.master.util.*
	com.brainspeedtech.constraint.software.*
	com.brainspeedtech.constraint.software.hx.*
	com.brainspeedtech.constraint.hardware.hx.*
	com.brainspeedtech.swarm.project.util.*
	com.brainspeedtech.swarm.flow.*
	com.brainspeedtech.swarm.layer.*;"
%>

<%	
 	CellInstance instance = (CellInstance) argument;
 	MasterCell mCell = instance.getCell();
 	String[] copyrightMessage = LayerUtil.getCopyrightMessage(instance);
 	NoIdleHandler noIdle = ProjectUtil.getReferringInstance(instance.getCell(), NoIdleHandler.class);
 	NoInitHandler noInit = ProjectUtil.getReferringInstance(instance.getCell(), NoInitHandler.class);
%>	
/*
 *  (c)2013 Mangstor, LLC. All rights reserved.
 */


#include "gen_<%=instance.getName()%>.h"
<%for(MasterTube ti : instance.getCell().getInput()) {
	if(ProjectUtil.getReferringInstance(ti, MemoryFIFO.class) != null) continue;
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti, BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2;
%>
<%=ti.getName()%>_t <%=ti.getName()%>[<%=count%>];
unsigned <%=ti.getName()%>_descr_pidx = 0;
unsigned <%=ti.getName()%>_descr_cidx = 0;
<%TubeDescriptorLog logger = ProjectUtil.getReferringInstance(ti, TubeDescriptorLog.class);
if (logger != null) {%>
int log__<%=ti.getName()%>_index = 0;
<%=ti.getName()%>_t log__<%=ti.getName()%>[<%=logger.getCount()%>] = { 0 };
<%}%>
<%}%>


<%for(TubeInstance ti : instance.getInput()) {
   	if(ProjectUtil.getReferringInstance(ti.getTube(), MemoryFIFO.class) != null) continue;
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2;
%>
uint32_t __nonblocking_remaining_count_<%=ti.getName()%>;
uint32_t* __nonblocking_ptr_<%=ti.getName()%>;
<%}%>

<%for(TubeInstance ti : instance.getOutput()) {
   	if(ProjectUtil.getReferringInstance(ti.getTube(), MemoryFIFO.class) != null) continue;
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2;
%>
uint32_t __nonblocking_remaining_count_<%=ti.getName()%>;
uint32_t* __nonblocking_ptr_<%=ti.getName()%>;
<%}%>

<%for(TubeInstance ti : instance.getInput()) {
   	if(ProjectUtil.getReferringInstance(ti.getTube(), MemoryFIFO.class) == null) continue;
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2;
%>

<%=ti.getTube().getName()%>_t <%=ti.getName()%>[<%=count%>];
unsigned <%=ti.getName()%>_descr_pidx MRAY_SHARED = 0;
unsigned <%=ti.getName()%>_descr_cidx MRAY_SHARED = 0;
<%TubeDescriptorLog logger = ProjectUtil.getReferringInstance(ti.getTube(), TubeDescriptorLog.class);
if (logger != null) {%>
int log__<%=ti.getName()%>_index = 0;
<%=ti.getTube().getName()%>_t log__<%=ti.getName()%>[<%=logger.getCount()%>] = { 0 };
<%}%>
<%}%>

<%for(TubeInstance ti : instance.getOutput()) {
   	if(ProjectUtil.getReferringInstance(ti.getTube(), MemoryFIFO.class) == null) continue;
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2;
%>
<%=ti.getTube().getName()%>_t <%=ti.getName()%>[<%=count%>] MRAY_SHARED = { 0 };
unsigned <%=ti.getName()%>_descr_pidx MRAY_SHARED = 0;
unsigned <%=ti.getName()%>_descr_cidx MRAY_SHARED = 0;
<%}%>

<%
Collection<Counter> counters = ProjectUtil.getReferringInstances(mCell, Counter.class);
counters.addAll(ProjectUtil.getReferringInstances(mCell.getInput(), TubeReceiveCounter.class));
counters.addAll(ProjectUtil.getReferringInstances(mCell.getOutput(), TubeTransmitCounter.class));
if(counters.size() != 0) {
%>
<%=mCell.getName()%>_counters_t counter_file = { 0 };
<%}%>

<%
Collection<SharedVariable> sharedVariables = ProjectUtil.getReferringInstances(mCell, SharedVariable.class);
  Set<SharedMemoryTube> sharedMemoryTubes = new HashSet<SharedMemoryTube>();
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(mCell, SharedMemoryTube.class));
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(mCell, SharedMemoryTube.class));
%>
<%for(SharedVariable svar: sharedVariables) {
int varInstanceCount = 0;
for(MasterCell mc: svar.getMasterCell()) {
	int icCount = ProjectUtil.getReferringInstances(mc, CellInstance.class).size();
	if (icCount > varInstanceCount) varInstanceCount = icCount;
}
%>
<%=svar.getStruct().getName()%>_t <%=svar.getName()%>__<%=(instance.getInstance()%varInstanceCount)%> MRAY_SHARED = { 0 };
int <%=svar.getName()%>__<%=(instance.getInstance()%varInstanceCount)%>_groupmembers MRAY_SHARED = 0;
<%}%>

uint8_t __data[4096];

int main(int argc, char* argv[])
{

<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/shared_mem_init_call.jet"%>

<%for(SharedVariable svar: sharedVariables) {
int varInstanceCount = 0;
for(MasterCell mc: svar.getMasterCell()) {
	int icCount = ProjectUtil.getReferringInstances(mc, CellInstance.class).size();
	if (icCount > varInstanceCount) varInstanceCount = icCount;
}
	if(instance.getCell() == svar.getMasterCell().get(0)) {%>
 	<%=svar.getName()%>__<%=(instance.getInstance()%varInstanceCount)%>_groupmembers = 1;
<%	}
}%>

<%for(SharedVariable svar: sharedVariables) {
int varInstanceCount = 0;
for(MasterCell mc: svar.getMasterCell()) {
	int icCount = ProjectUtil.getReferringInstances(mc, CellInstance.class).size();
	if (icCount > varInstanceCount) varInstanceCount = icCount;
}
	if(instance.getCell() != svar.getMasterCell().get(0)) {%>
 	while(<%=svar.getName()%>__<%=(instance.getInstance()%varInstanceCount)%>_groupmembers == 0);
<%	}
}%>



<%if(noIdle == null && noInit == null) {%>
	int call_idle = 
	<%}%>	<%if(noInit == null) { %><%=instance.getCell().getName()%>_init();<%}%>

<%  if (ProjectUtil.getReferringInstance(instance, CustomInstanceCell.class) == null &&
		ProjectUtil.getReferringInstance(instance.getCell(), CustomMasterCell.class) == null) {
%>

<%for(MasterTube mt: instance.getCell().getInput()) {
    if(ProjectUtil.getReferringInstance(mt, IgnoreHyperxTube.class) != null) continue;
	if(ProjectUtil.getReferringInstance(mt, CustomTube.class) != null||
       ProjectUtil.getReferringInstance(mt, CustomHyperxTube.class) != null) continue;
	if (ProjectUtil.getReferringInstance(mt, MemoryFIFO.class) != null) continue;
    Collection<TubeInstance> tCollection = ProjectUtil.getReferringInstances(mt, TubeInstance.class);
    TubeInstance ti = null;
    for(TubeInstance tryThis: tCollection) {
       if(tryThis.getTo() == instance) ti = tryThis;
    }
	if (ti == null) continue;
	ExternalPort extPort = ProjectUtil.getReferringInstance(ti, ExternalPort.class);
	if (extPort != null) if (extPort.getType().equals(TypeType.DDR2)) continue;
%>

<%
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(mt, BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) {
        count = (count + 1)/2 * 2; %>
	SWARM_RECV_NONBLOCKING_RELATIVE(INPUT_<%=mt.getName().toUpperCase()%>, 0,
                <%=mt.getName()%>, SWARM_SIZEOF(<%=mt.getName()%>)/2);
<% } else { %>
    SWARM_RECV_NONBLOCKING_RELATIVE(INPUT_<%=mt.getName().toUpperCase()%>, 0,
                <%=mt.getName()%>, SWARM_SIZEOF(<%=mt.getName()%>));
<% }%>
<%
}%>
	
	while(1) {
		int flow = 0;
		unsigned dma_count;
		unsigned pidx;
		unsigned cidx;
		int blocked = 0;
		
<%for(MasterTube ti : instance.getCell().getInput()) {
    if(ProjectUtil.getReferringInstance(ti, IgnoreHyperxTube.class) != null) continue;
	if(ProjectUtil.getReferringInstance(ti, CustomTube.class) != null||
       ProjectUtil.getReferringInstance(ti, CustomHyperxTube.class) != null) continue;
	Collection<TubeInstance> tCollection = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
	TubeInstance t = null;
	for(TubeInstance tryThis: tCollection) {
	   if(tryThis.getTo() == instance) t = tryThis;
	}
	if (t == null) continue;
	ExternalPort extPort = ProjectUtil.getReferringInstance(t, ExternalPort.class);
	if (extPort != null) if (extPort.getType().equals(TypeType.DDR2)) continue;
	if (ProjectUtil.getReferringInstance(ti, MemoryFIFO.class) != null) continue;
	Collection<Flow> flows = MasterUtil.getFlows(ti);
%>
<%
    boolean blocking = ProjectUtil.getReferringInstance(ti, BlockingReceiver.class) != null;
%>

<%
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti, BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2; %>
<%  if (count == 1) { %>
		if(!SWARM_RECV_BUSY_RELATIVE(INPUT_<%=ti.getName().toUpperCase()%>, 0)) {
<%if(ProjectUtil.getReferringInstance(ti, SingleTubeHandler.class) != null) {%>
<%if(blocking) {%>
            blocked =
<%}%>
            <%=ti.getName()%>_handler(&<%=ti.getName()%>[0]);
<%} else {%>
<%if (flows.size() > 1) {%>
			flow = get_<%=ti.getName()%>_flow(&<%=ti.getName()%>[0]);
			switch(flow) {
<%}%>
<%for(Flow flow: flows) {%>
<%if (flows.size() > 1) {%>
				case ENUM_<%=flow.getName().toUpperCase()%>_FLOW:
<%}%>
<%if(blocking) {%>
                    blocked =
<%}%>
					<%=ti.getName()%>_<%=flow.getName()%>_handler(&<%=ti.getName()%>[0]);
<%if (flows.size() > 1) {%>
					break;
<%}%>
<%}%> 
<%if (flows.size() > 1) {%>
				default:
					SWARM_FATAL_ERROR;
			}
<%}%>
<%}%>
<%if(noIdle == null) { %>
			call_idle = 1;
<%}%>
<%if(blocking) {%>
            if(!blocked) {
<%}%>
<%TubeDescriptorLog logger = ProjectUtil.getReferringInstance(ti, TubeDescriptorLog.class);
if (logger != null) {%>
            log__<%=ti.getName()%>[log__<%=ti.getName()%>_index] = <%=ti.getName()%>[0];
            log__<%=ti.getName()%>_index = (log__<%=ti.getName()%>_index + 1) % <%=logger.getCount()%>;
<%}%>
            SWARM_RECV_NONBLOCKING_RELATIVE(INPUT_<%=ti.getName().toUpperCase()%>, 0, <%=ti.getName()%>, SWARM_SIZEOF(<%=ti.getName()%>));
<%if(blocking) {%>
            }
<%}%>       

		}
<% } else { %>
        dma_count = 1;
        if(!SWARM_RECV_BUSY_RELATIVE(INPUT_<%=ti.getName().toUpperCase()%>, 0)) dma_count = <%=count/2%>;
        pidx = <%=ti.getName()%>_descr_pidx + dma_count;
        cidx = <%=ti.getName()%>_descr_cidx;
        if (cidx != pidx) {
            if(dma_count == <%=count/2%>) {
                if(((<%=ti.getName()%>_descr_pidx + <%=count/2%>) - cidx) <= <%=count/2%>) {
                	<%=ti.getName()%>_descr_pidx += <%=count/2%>;
                	unsigned buffer_id = (<%=ti.getName()%>_descr_pidx % <%=count%>);
                    SWARM_RECV_NONBLOCKING_RELATIVE(INPUT_<%=ti.getName().toUpperCase()%>, 0,
                            &<%=ti.getName()%>[buffer_id], SWARM_SIZEOF(<%=ti.getName()%>)/2);
                }
            }
<%if(ProjectUtil.getReferringInstance(ti, SingleTubeHandler.class) != null) {%>
<%if(blocking) {%>
            blocked =
<%}%>
            <%=ti.getName()%>_handler(&<%=ti.getName()%>[cidx%<%=count%>]);
<%} else {%>
<%if (flows.size() > 1) {%>
            flow = get_<%=ti.getName()%>_flow(&<%=ti.getName()%>[cidx%<%=count%>]);
            switch(flow) {
<%}%>
<%for(Flow flow: flows) {%>
<%if (flows.size() > 1) {%>
                case ENUM_<%=flow.getName().toUpperCase()%>_FLOW:
<%}%>
<%if(blocking) {%>
                    blocked =
<%}%>
                    <%=ti.getName()%>_<%=flow.getName()%>_handler(&<%=ti.getName()%>[cidx%<%=count%>]);
<%if (flows.size() > 1) {%>
                    break;
<%}%>
<%}%> 
<%if (flows.size() > 1) {%>
                default:
                    SWARM_FATAL_ERROR;
            }
<%}%>
<%}%>
<%if(blocking) {%>
            if(!blocked) {
<%}%>       
<%TubeDescriptorLog logger = ProjectUtil.getReferringInstance(ti, TubeDescriptorLog.class);
if (logger != null) {%>
            log__<%=ti.getName()%>[log__<%=ti.getName()%>_index] = <%=ti.getName()%>[cidx%<%=count%>];
            log__<%=ti.getName()%>_index = (log__<%=ti.getName()%>_index + 1) % <%=logger.getCount()%>;
<%}%>
            <%=ti.getName()%>_descr_cidx = (cidx + 1);
<%if(blocking) {%>
            }
<%}%>       
<%if(noIdle == null) { %>
            call_idle = 1;
<%}%>
        }
<% }%>
<%}%>

<%for(TubeInstance ti : instance.getInput()) {
    if(ProjectUtil.getReferringInstance(ti.getTube(), IgnoreHyperxTube.class) != null) continue;
	if(ProjectUtil.getReferringInstance(ti.getTube(), CustomTube.class) != null||
       ProjectUtil.getReferringInstance(ti.getTube(), CustomHyperxTube.class) != null) continue;
	ExternalPort extPort = ProjectUtil.getReferringInstance(ti, ExternalPort.class);
	if (extPort != null) if (extPort.getType().equals(TypeType.DDR2)) continue;
	if(ProjectUtil.getReferringInstance(ti.getTube(), MemoryFIFO.class) == null) continue; 
	Collection<Flow> flows = MasterUtil.getFlows(ti.getTube());
    boolean blocking = ProjectUtil.getReferringInstance(ti.getTube(), BlockingReceiver.class) != null;
    BufferDepth bufferDepth = ProjectUtil.getReferringInstance(ti.getTube(), BufferDepth.class);
    int count = 1;
    if (bufferDepth != null) count = bufferDepth.getDepth();
    if (count != 1) count = (count + 1)/2 * 2; %>
        pidx = <%=ti.getName()%>_descr_pidx;
        cidx = <%=ti.getName()%>_descr_cidx;
        if (cidx != pidx) {
<%if(ProjectUtil.getReferringInstance(ti.getTube(), SingleTubeHandler.class) != null) {%>
<%if(blocking) {%>
            blocked =
<%}%>
            <%=ti.getTube().getName()%>_handler(&<%=ti.getName()%>[cidx%<%=count%>]);
<%} else {%>
<%if (flows.size() > 1) {%>
            flow = get_<%=ti.getTube().getName()%>_flow(&<%=ti.getName()%>[cidx%<%=count%>]);
            switch(flow) {
<%}%>
<%for(Flow flow: flows) {%>
<%if (flows.size() > 1) {%>
                case ENUM_<%=flow.getName().toUpperCase()%>_FLOW:
<%}%>
<%if(blocking) {%>
                    blocked =
<%}%>
                    <%=ti.getTube().getName()%>_<%=flow.getName()%>_handler(&<%=ti.getName()%>[cidx%<%=count%>]);
<%if (flows.size() > 1) {%>
                    break;
<%}%>
<%}%> 
<%if (flows.size() > 1) {%>
                default:
                    SWARM_FATAL_ERROR;
            }
<%}%>
<%}%>
<%if(blocking) {%>
            if(!blocked) {
<%}%>       
<%TubeDescriptorLog logger = ProjectUtil.getReferringInstance(ti, TubeDescriptorLog.class);
if (logger != null) {%>
            log__<%=ti.getName()%>[log__<%=ti.getName()%>_index] = <%=ti.getName()%>[cidx%<%=count%>];
            log__<%=ti.getName()%>_index = (log__<%=ti.getName()%>_index + 1) % <%=logger.getCount()%>;
<%}%>
            <%=ti.getName()%>_descr_cidx = (cidx + 1);
<%if(blocking) {%>
            }
<%}%>       
<%if(noIdle == null) { %>
            call_idle = 1;
<%}%>
        }
<% }%>

<%if(noIdle == null) { %>
		if (call_idle) {
			call_idle = <%=instance.getCell().getName()%>_idle();
		}
<%}%>
	}
<%}%>
	return 0;
}


