<%@ jet package="com.brainspeedtech.gen.software.mray"
	class="InstancePlanSourceFile" 
	imports ="java.util.*
	com.brainspeedtech.swarm.layer.util.*
	com.brainspeedtech.swarm.layer.*
	com.brainspeedtech.swarm.sm.*
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.swarm.master.util.*
	com.brainspeedtech.swarm.flow.*
	com.brainspeedtech.swarm.master.*
	com.brainspeedtech.swarm.project.util.*
	com.brainspeedtech.constraint.software.*
    com.brainspeedtech.constraint.hardware.hx.*
    com.brainspeedtech.constraint.software.hx.*
	org.eclipse.emf.ecore.util.*
	org.eclipse.emf.ecore.*;"
%>
<%
MasterCell cell = (MasterCell) argument;  	
%>	
/*
 *  (c)2013 Mangstor, LLC. All rights reserved.
 */

#include "gen_<%=cell.getName()%>.h"


<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/sm_instancing_source.jet"%>

<%
 Collection<SharedVariable> sharedVariables = ProjectUtil.getReferringInstances(cell, SharedVariable.class);
  Set<SharedMemoryTube> sharedMemoryTubes = new HashSet<SharedMemoryTube>();
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(cell, SharedMemoryTube.class));
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(cell, SharedMemoryTube.class));
%>
<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/shared_mem_init_defn.jet"%>


int <%=cell.getName()%>_init()
{
<%for(SharedVariable svar: sharedVariables) {
%>
	memset(&shared_<%=svar.getName()%>, 0, sizeof(shared_<%=svar.getName()%>));
<%
}%>

<%
	Tap tap = ProjectUtil.getReferringInstance(cell, Tap.class);
	if (tap != null) { 
		for(MasterTube ti: tap.getTube()) {
		if(ProjectUtil.getReferringInstance(ti, IgnoreHyperxTube.class) != null) continue;
		
		int i = 0;
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
		for(TubeInstance tInstance: tubeInstances) {
%>

<%
			++i;
			break;
		}
	}
}%>

	return 0;
}

<% 
if(ProjectUtil.getReferringInstance(cell, CustomMasterCell.class) == null) {
%>


int <%=cell.getName()%>_idle()
{
	//SWARM_FATAL_ERROR;
<%
for (MasterTube mt: cell.getOutput()) {
    if(ProjectUtil.getReferringInstance(mt, IgnoreHyperxTube.class) != null) continue;
	ExternalPort extPort = ProjectUtil.getReferringInstance(
		ProjectUtil.getReferringInstance(mt, TubeInstance.class), ExternalPort.class);
	if (extPort != null) if (extPort.getType().equals(TypeType.DDR2)) continue;

	Set<Flow> outputFlows = MasterUtil.getFlows(mt);
	Set<Flow> inputFlows = new HashSet<Flow>();
	for(MasterTube ti: cell.getInput()) {
		inputFlows = MasterUtil.getFlows(ti);
		inputFlows.retainAll(outputFlows);
		if (!inputFlows.isEmpty()) {
			break;
		}
	}
	
	if (inputFlows.isEmpty()) {
		int globalTubeIndex = 0;
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(mt, TubeInstance.class);
%>
	static <%=mt.getName()%>_t dummy_<%=mt.getName()%>;
<%
		int i = 0;
		for(TubeInstance ti : tubeInstances) {
%>
#ifdef <%=mt.getName().toUpperCase()%>_CHILD_TUBE_COUNT
	SWARM_SEND_RELATIVE(OUTPUT_<%=mt.getName().toUpperCase()%>, <%=i%>,
		&dummy_<%=mt.getName()%>, SWARM_SIZEOF(<%=mt.getName()%>_t));
#endif
<%
			++i;
			++globalTubeIndex;
		}
	}
}
%>
	SWARM_FATAL_ERROR;
	return 0;
}

<%for(MasterTube mt : cell.getInput()) {
	Collection<Flow> flows = MasterUtil.getFlows(mt);
%>
<%if (flows.size() > 1) {%>
/*
	<%@ include file="../../com.bst.gen/template_includes/tube_comment.jet"%>
*/
int get_<%=mt.getName()%>_flow(<%=mt.getName()%>_t* hdr)
{
	SWARM_FATAL_ERROR;
	return 0;
}
<%}%>

<%
    String returnType = ProjectUtil.getReferringInstance(mt, BlockingReceiver.class) == null ? "void" : "int";
    String returnValue = ProjectUtil.getReferringInstance(mt, BlockingReceiver.class) == null ? "return" : "return 0";
%>
<%if(ProjectUtil.getReferringInstance(mt, SingleTubeHandler.class) != null) {%>

/* Using the SingleTubeHandler constraint */

<%=returnType%> <%=mt.getName()%>_handler(<%=mt.getName()%>_t* hdr)
{
	//SWARM_FATAL_ERROR;
<%for(MasterTube ti : cell.getOutput()) {
    if(ProjectUtil.getReferringInstance(ti, IgnoreHyperxTube.class) != null) continue;
		ExternalPort extPort = ProjectUtil.getReferringInstance(
		ProjectUtil.getReferringInstance(ti, TubeInstance.class), ExternalPort.class);
	if (extPort != null) if (extPort.getType().equals(TypeType.DDR2)) continue;
%>	
	static <%=ti.getName()%>_t dummy_<%=ti.getName()%>;
<%{
		int i = 0;
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
		for(TubeInstance tInstance: tubeInstances) {
%>
#ifdef <%=ti.getName().toUpperCase()%>_CHILD_TUBE_COUNT	
	SWARM_SEND_RELATIVE(OUTPUT_<%=ti.getName().toUpperCase()%>, <%=i%>,
		&dummy_<%=ti.getName()%>, SWARM_SIZEOF(<%=ti.getName()%>_t));
#endif
<%       }
   }
}%>
	SWARM_FATAL_ERROR;
	<%=returnValue%>;
}

<%} else {%>


<%for(Flow flow : MasterUtil.getFlows(mt)) {%>
/*
	<%@ include file="../../com.bst.gen/template_includes/tube_flow_comment.jet"%>
*/
<%=returnType%> <%=mt.getName()%>_<%=flow.getName()%>_handler(<%=mt.getName()%>_t* hdr)
{
	//SWARM_FATAL_ERROR;
<%for(MasterTube ti : cell.getOutput()) {
   if(ProjectUtil.getReferringInstance(ti, IgnoreHyperxTube.class) != null) continue;
		ExternalPort extPort = ProjectUtil.getReferringInstance(
		ProjectUtil.getReferringInstance(ti, TubeInstance.class), ExternalPort.class);
	if (extPort != null) if (extPort.getType().equals(TypeType.DDR2)) continue;
%>	
	static <%=ti.getName()%>_t dummy_<%=ti.getName()%>_<%=flow.getName()%>;
<%
	if(MasterUtil.getFlows(ti).contains(flow)) {
		int i = 0;
		Set<TubeInstance> tubeInstances = ProjectUtil.getReferringInstances(ti, TubeInstance.class);
		for(TubeInstance tInstance: tubeInstances) {
%>
#ifdef <%=ti.getName().toUpperCase()%>_CHILD_TUBE_COUNT 
	SWARM_SEND_RELATIVE(OUTPUT_<%=ti.getName().toUpperCase()%>, <%=i%>,
		&dummy_<%=ti.getName()%>_<%=flow.getName()%>, SWARM_SIZEOF(<%=ti.getName()%>_t));
#endif
<%
			++i;
		}
	}
}%>
	SWARM_FATAL_ERROR;
	<%=returnValue%>;
}

<%}%>
<%} // SingleTubeHandler %>
<%}%>

<%}%>
