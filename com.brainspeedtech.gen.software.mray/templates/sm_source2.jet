<%@ jet package="com.brainspeedtech.gen.software.mray"
	class="SMSourceFile2" 
	imports ="org.eclipse.emf.ecore.*
	com.brainspeedtech.swarm.sm.*
	com.brainspeedtech.swarm.project.util.*
	com.brainspeedtech.constraint.software.*
	java.util.*
	org.eclipse.emf.transaction.util.TransactionUtil
	org.eclipse.emf.transaction.TransactionalEditingDomain;"
%>
<%StateMachine instance = (StateMachine) argument;%>
<%TransactionalEditingDomain domain = TransactionUtil.getEditingDomain(instance);
 	String designName = domain.getID();
 	Collection<StateGroup> groups = ProjectUtil.getReferringInstances(instance.getState(), StateGroup.class);
 	
%>
/*
 *  (c)2013 Mangstor, LLC. All rights reserved.
 */

// Copyright Mangstor LLC,
// All rights reserved.

#ifndef __<%=instance.getName().toUpperCase()%>_SM_C_H__
#define __<%=instance.getName().toUpperCase()%>_SM_C_H__

#include "gen_<%=designName%>.h"
#include "gen_<%=instance.getName()%>_sm.h"

<%
	Set<String> transitions = new HashSet<String>();
	for (Transition transition : instance.getTransition()) {
		transitions.add(transition.getName());
	}
%>

<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/sm_strings.jet"%>

<%
for(State state: instance.getState()) {%>
// Compute the right transition for <%=state.getName()%> state
// Allowed transitions are
<% for(Transition transition : state.getDest()) { %>
//		ENUM_<%=instance.getName().toUpperCase()%>_<%=transition.getName().toUpperCase()%>_TRANSITION
<% }%>
//		ENUM_<%=instance.getName().toUpperCase()%>_NULL_TRANSITION
#define <%=instance.getName().toUpperCase()%>_COMPUTE_<%=state.getName().toUpperCase()%>_TRANSITION \
	<%=instance.getName()%>_compute_<%=state.getName()%>_transition()

<%}%>

#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
#define DEBUG_<%=instance.getName().toUpperCase()%>_PRINT_TRANSITION(__transition__, __state__) print_<%=instance.getName()%>_transition(__transition__, __state__)
#else
#define DEBUG_<%=instance.getName().toUpperCase()%>_PRINT_TRANSITION(__transition__, __state__)
#endif

// Get/set the state variable
#define GET_<%=instance.getName().toUpperCase()%>_STATE get_<%=instance.getName()%>_state()
#define SET_<%=instance.getName().toUpperCase()%>_STATE(__transition__, __state__) {\
	if ((__transition__) != ENUM_<%=instance.getName().toUpperCase()%>_NULL_TRANSITION) {\
		set_<%=instance.getName()%>_state_wrapper(__transition__, __state__);\
	}\
}
#define GET_<%=instance.getName().toUpperCase()%>_RESOURCE get_<%=instance.getName()%>_resource()


static void  set_<%=instance.getName()%>_state_wrapper(
	ENUM_<%=instance.getName().toUpperCase()%>_TRANSITION transition,
	ENUM_<%=instance.getName().toUpperCase()%>_STATE state)
{
	static volatile int <%=instance.getName()%>_log_pidx = 0;
	static volatile struct {
		int resource;
		int transition;
		int from_state;
		int to_state;
	} <%=instance.getName()%>_state_log[32] = { 0 };
	
	<%=instance.getName()%>_state_log[<%=instance.getName()%>_log_pidx].resource = get_<%=instance.getName()%>_resource();
	<%=instance.getName()%>_state_log[<%=instance.getName()%>_log_pidx].transition = transition;
	<%=instance.getName()%>_state_log[<%=instance.getName()%>_log_pidx].from_state = get_<%=instance.getName()%>_state();
	<%=instance.getName()%>_state_log[<%=instance.getName()%>_log_pidx].to_state = state;
	<%=instance.getName()%>_log_pidx++;
	<%=instance.getName()%>_log_pidx %= 32;
	set_<%=instance.getName()%>_state(transition, state);	
}


void print_<%=instance.getName()%>_transition(ENUM_<%=instance.getName().toUpperCase()%>_TRANSITION transition, 
	ENUM_<%=instance.getName().toUpperCase()%>_STATE state)
{
	ENUM_<%=instance.getName().toUpperCase()%>_STATE current_state = GET_<%=instance.getName().toUpperCase()%>_STATE;
	int current_resource = GET_<%=instance.getName().toUpperCase()%>_RESOURCE;
#if 0	
	MPX_Print("STATE MACHINE <%=instance.getName().toUpperCase()%> %F(%L:%T) " , current_resource);
	MPX_Print("      From State ", current_state);
	MPX_Print("      Transition ", transition);
	MPX_Print("      To State   ", state);
#endif
}

<%for(State state: instance.getState()) {%>
void <%=instance.getName()%>_process_<%=state.getName()%>_state()
{
	int transition;
#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
	int current_resource = GET_<%=instance.getName().toUpperCase()%>_RESOURCE;
#endif
	
	transition = <%=instance.getName().toUpperCase()%>_COMPUTE_<%=state.getName().toUpperCase()%>_TRANSITION;
	switch(transition) {
<% for(Transition transition : state.getDest()) { %>
	case ENUM_<%=instance.getName().toUpperCase()%>_<%=transition.getName().toUpperCase()%>_TRANSITION:
#if 0
#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
		MPX_Print("STATE MACHINE <%=instance.getName().toUpperCase()%> %F(%L:%T) " , current_resource);
		MPX_Print("      From State <%=state.getName().toUpperCase()%>");
		MPX_Print("      Transition <%=transition.getName().toUpperCase()%>");
		MPX_Print("      To State   <%=transition.getTo().getName().toUpperCase()%>");
#endif
#endif
		SET_<%=instance.getName().toUpperCase()%>_STATE(ENUM_<%=instance.getName().toUpperCase()%>_<%=transition.getName().toUpperCase()%>_TRANSITION, 
			ENUM_<%=instance.getName().toUpperCase()%>_<%=transition.getTo().getName().toUpperCase()%>_STATE);
		break;
<% }%>

<%
	boolean ignoreInvalidTransitions = false;
	if (ProjectUtil.getReferringInstance(instance, IgnoreInvalidTransitions.class) != null)
		ignoreInvalidTransitions = true;
	if (ProjectUtil.getReferringInstance(state, IgnoreInvalidTransitions.class) != null)
		ignoreInvalidTransitions = true;
		
	if (!ignoreInvalidTransitions) {
%>
	case ENUM_<%=instance.getName().toUpperCase()%>_NULL_TRANSITION:
		SET_<%=instance.getName().toUpperCase()%>_STATE(ENUM_<%=instance.getName().toUpperCase()%>_NULL_TRANSITION, 
			ENUM_<%=instance.getName().toUpperCase()%>_<%=state.getName().toUpperCase()%>_STATE);
		break;
	default:
		SWARM_PRINT2(" => Bad Transition %s in state %s\n", 
			<%=instance.getName()%>_transition_str(transition),
			<%=instance.getName()%>_state_str(GET_<%=instance.getName().toUpperCase()%>_STATE));
		SWARM_FATAL_ERROR;
		break;
<%
	}
%>
	}
}
<%}%>

<%if(groups.isEmpty()) { %>
void <%=instance.getName()%>_sm()
{
	int current_state;
	
	current_state = GET_<%=instance.getName().toUpperCase()%>_STATE;
	switch(current_state) {
<%for(State state: instance.getState()) {%>
	case ENUM_<%=instance.getName().toUpperCase()%>_<%=state.getName().toUpperCase()%>_STATE:
		<%=instance.getName()%>_process_<%=state.getName()%>_state();
		break;
<%}%>
	default:
		SWARM_PRINT2(" => Bad state %d for resource %d\n",
			current_state, GET_<%=instance.getName().toUpperCase()%>_RESOURCE);
		SWARM_FATAL_ERROR;
		break;
	}
}
<%}%>

<%
for(StateGroup group: groups) {%>
void <%=instance.getName()%>_<%=group.getName()%>_sm()
{
	int current_state;
	
	current_state = GET_<%=instance.getName().toUpperCase()%>_STATE;
	switch(current_state) {
<%for(State state: group.getState()) {
	if(state.eContainer() == instance) {%>
	case ENUM_<%=instance.getName().toUpperCase()%>_<%=state.getName().toUpperCase()%>_STATE:
		<%=instance.getName()%>_process_<%=state.getName()%>_state();
		break;
<%	}
}%>
	}
}
<%}%>


<%for(String transition: transitions) {
	Map<State, Transition> states = new HashMap<State, Transition>();
	for (Transition trans : instance.getTransition()) {
		if(trans.getName().equals(transition)) {
			states.put(trans.getFrom(), trans);
		}
	}
%>
void <%=instance.getName()%>_process_<%=transition%>_transition()
{
	int state;
#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
	int current_resource = GET_<%=instance.getName().toUpperCase()%>_RESOURCE;
#endif
	
	state = GET_<%=instance.getName().toUpperCase()%>_STATE;
	switch(state) {
<% for(State state : states.keySet()) { %>
	case ENUM_<%=instance.getName().toUpperCase()%>_<%=state.getName().toUpperCase()%>_STATE:
#if 0
#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
		MPX_Print("STATE MACHINE <%=instance.getName().toUpperCase()%> %F(%L:%T) " , current_resource);
		MPX_Print("      From State <%=state.getName().toUpperCase()%>");
		MPX_Print("      Transition <%=transition.toUpperCase()%>");
		MPX_Print("      To State   <%=states.get(state).getTo().getName().toUpperCase()%>");
#endif	
#endif
		SET_<%=instance.getName().toUpperCase()%>_STATE(
			ENUM_<%=instance.getName().toUpperCase()%>_<%=transition.toUpperCase()%>_TRANSITION,
			ENUM_<%=instance.getName().toUpperCase()%>_<%=states.get(state).getTo().getName().toUpperCase()%>_STATE);
		break;
<% }%>
	default:
		SWARM_PRINT2(" => Bad State %s for transition %s\n", 
			<%=instance.getName()%>_state_str(state),
			"<%=transition%>");
		SWARM_FATAL_ERROR;
		break;
	}
}
<%}%>

<%
for(StateGroup group: groups) {
	for(String transition: transitions) {
	Map<State, Transition> states = new HashMap<State, Transition>();
	for (Transition trans : instance.getTransition()) {
		if(trans.getName().equals(transition) &&
			group.getState().contains(trans.getFrom())) {
			states.put(trans.getFrom(), trans);
		}
	}
%>
void <%=instance.getName()%>_<%=group.getName()%>_process_<%=transition%>_transition()
{
	int state;
	
#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
	int current_resource = GET_<%=instance.getName().toUpperCase()%>_RESOURCE;
#endif

	state = GET_<%=instance.getName().toUpperCase()%>_STATE;
	switch(state) {
<% for(State state : states.keySet()) { %>
	case ENUM_<%=instance.getName().toUpperCase()%>_<%=state.getName().toUpperCase()%>_STATE:
#if 0
#ifdef DEBUG_<%=instance.getName().toUpperCase()%>
		MPX_Print("STATE MACHINE <%=instance.getName().toUpperCase()%> %F(%L:%T) " , current_resource);
		MPX_Print("      From State <%=state.getName().toUpperCase()%>");
		MPX_Print("      Transition <%=transition.toUpperCase()%>");
		MPX_Print("      To State   <%=states.get(state).getTo().getName().toUpperCase()%>");
#endif
#endif
		SET_<%=instance.getName().toUpperCase()%>_STATE(
			ENUM_<%=instance.getName().toUpperCase()%>_<%=transition.toUpperCase()%>_TRANSITION,
			ENUM_<%=instance.getName().toUpperCase()%>_<%=states.get(state).getTo().getName().toUpperCase()%>_STATE);
		break;
<% }%>
	default:
		SWARM_PRINT2(" => Bad State %s for transition %s\n", 
			<%=instance.getName()%>_state_str(state),
			"<%=transition%>");
		SWARM_FATAL_ERROR;
		break;
	}
}
<%}%>
<%}%>
#endif


