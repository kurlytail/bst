<%@ jet package="com.brainspeedtech.gen.software.mray"
	class="InstancePlanHeaderFile" 
	imports ="
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.swarm.master.util.*
	com.brainspeedtech.swarm.flow.*
	com.brainspeedtech.swarm.master.*
	com.brainspeedtech.constraint.software.hx.*
	com.brainspeedtech.constraint.hardware.hx.*
	com.brainspeedtech.constraint.software.*
	com.brainspeedtech.swarm.layer.*
	java.util.*
	com.brainspeedtech.swarm.project.util.*;"
%>
<% 
MasterCell cell = (MasterCell) argument;  	
String[] copyrightMessage = LayerUtil.getCopyrightMessage(cell);
Collection<CellInstance> cellInstances =  ProjectUtil.getReferringInstances(cell, CellInstance.class);
%>	
/*
 *  (c)2013 Mangstor, LLC. All rights reserved.
 */

#ifndef __GEN__<%=cell.getName().toUpperCase()%>_H__
#define __GEN__<%=cell.getName().toUpperCase()%>_H__

#include "gen_<%=((MasterDesign)cell.eContainer()).getName()%>.h"
#include "gen_<%=((MasterDesign)cell.eContainer()).getName()%>_counters.h"

<% 
if(ProjectUtil.getReferringInstance(cell, CustomMasterCell.class) == null) {
%>
<%for(MasterTube ti : cell.getInput()) {%>
extern <%=ti.getName()%>_t <%=ti.getName()%>[];

<%
    String returnType = ProjectUtil.getReferringInstance(ti, BlockingReceiver.class) == null ? "void" : "int";
%>

int get_<%=ti.getName()%>_flow(<%=ti.getName()%>_t* hdr);
<%if(ProjectUtil.getReferringInstance(ti, SingleTubeHandler.class) != null) {%>
<%=returnType%> <%=ti.getName()%>_handler(<%=ti.getName()%>_t* hdr);
<%} else {%>
<%for(Flow flow : MasterUtil.getFlows(ti)) {%>
<%=returnType%> <%=ti.getName()%>_<%=flow.getName()%>_handler(<%=ti.getName()%>_t* hdr);
<%}%>
<%} // SingleTubeHandler %>
<%}%>
int <%=cell.getName()%>_idle();
<%}%>

int <%=cell.getName()%>_init();


#define TASK_<%=cell.getName().toUpperCase()%>_INSTANCE_COUNT (<%=cellInstances.size()%>)

<%
for (CellInstance ci: cellInstances) {
%>

extern uint8_t __data[];

#ifdef TASK_<%=ci.getName().toUpperCase()%>

#define TASK_<%=ci.getCell().getName().toUpperCase()%>_INSTANCE (<%=ci.getInstance()%>)
#define GEN_<%=ci.getCell().getName().toUpperCase()%>_INSTANCE_ID (<%=ci.getInstance()%>)
#define GEN_<%=((Instance)ci.eContainer()).getName().toUpperCase()%>_INSTANCE_ID (<%=ci.getInstance()%>)
#define GEN_TASK_NAME "<%=ci.getName()%>"

<%
int tubeIndex = 0;
HashMap<MasterTube, Integer> indexMap = new HashMap<MasterTube, Integer>();
for(TubeInstance ti : ci.getInput()) {
   if(ProjectUtil.getReferringInstance(ti.getTube(), IgnoreHyperxTube.class) != null) continue;
	if(!indexMap.containsKey(ti.getTube())) indexMap.put(ti.getTube(),new Integer(0));
	int i = indexMap.get(ti.getTube()).intValue();
%>
#define INPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%> FIFO_<%=ti.getName().toUpperCase()%>
#define SWARM_RECV_INPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%>(__ptr__, __size__) {\
	int remaining_size = ((__size__) + 3)/4;\
	memcpy(__ptr__, __data, remaining_size);\
<%
    TubeReceiveCounter rcounter = ProjectUtil.getReferringInstance(ti.getTube(), TubeReceiveCounter.class);
    if(rcounter != null) {%>
    COUNTER_<%=rcounter.getName().toUpperCase()%>_INC;\
<%}%>
}

extern uint32_t __nonblocking_remaining_count_<%=ti.getName()%>;
extern uint32_t* __nonblocking_ptr_<%=ti.getName()%>;
#define SWARM_RECV_NONBLOCKING_INPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%>(__ptr__, __size__) \
	{\
		__nonblocking_remaining_count_<%=ti.getName()%> = (__size__);\
		__nonblocking_ptr_<%=ti.getName()%> = (uint32_t*)(__ptr__);\
	}
	
#define SWARM_RECV_BUSY_INPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%> ({\
	memcpy(__nonblocking_ptr_<%=ti.getName()%>, __data, __nonblocking_remaining_count_<%=ti.getName()%>);\
<%
    rcounter = ProjectUtil.getReferringInstance(ti.getTube(), TubeReceiveCounter.class);
    if(rcounter != null) {%>
    if(__nonblocking_remaining_count_<%=ti.getName()%> == 0) {\
        COUNTER_<%=rcounter.getName().toUpperCase()%>_INC;\
    }\
<%}%>
	__nonblocking_remaining_count_<%=ti.getName()%> != 0;\
	})

<%
	tubeIndex ++;
	i++;
	indexMap.put(ti.getTube(),new Integer(i));
}

indexMap = new HashMap<MasterTube, Integer>();
for(TubeInstance ti : ci.getOutput()) {
   if(ProjectUtil.getReferringInstance(ti.getTube(), IgnoreHyperxTube.class) != null) continue;
	if(!indexMap.containsKey(ti.getTube())) indexMap.put(ti.getTube(),new Integer(0));
	int i = indexMap.get(ti.getTube()).intValue();
%>
#define OUTPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%> FIFO_<%=ti.getName().toUpperCase()%>
#define SWARM_SEND_OUTPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%>(__ptr__, __size__){\
<%
    TubeTransmitCounter tcounter = ProjectUtil.getReferringInstance(ti.getTube(), TubeTransmitCounter.class);
    if(tcounter != null) {%>
    COUNTER_<%=tcounter.getName().toUpperCase()%>_INC;\
<%}%>
	int remaining_size = ((__size__) + 3)/4;\
	memcpy(__data, __ptr__, remaining_size);\
}

extern uint32_t __nonblocking_remaining_count_<%=ti.getName()%>;
extern uint32_t* __nonblocking_ptr_<%=ti.getName()%>;
#define SWARM_SEND_NONBLOCKING_OUTPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%>(__ptr__, __size__) {\
<%
    tcounter = ProjectUtil.getReferringInstance(ti.getTube(), TubeTransmitCounter.class);
    if(tcounter != null) {%>
    COUNTER_<%=tcounter.getName().toUpperCase()%>_INC;\
<%}%>
	{\
		__nonblocking_remaining_count_<%=ti.getName()%> = (__size__);\
		__nonblocking_ptr_<%=ti.getName()%> = (uint32_t*)(__ptr__);\
	}\
}
#define SWARM_SEND_BUSY_OUTPUT_<%=ti.getTube().getName().toUpperCase()%>_<%=i%> ({\
	memcpy(__data, __nonblocking_ptr_<%=ti.getName()%>, __nonblocking_remaining_count_<%=ti.getName()%>);\
	__nonblocking_remaining_count_<%=ti.getName()%> != 0;\
})
<%
	i++;
	indexMap.put(ti.getTube(),new Integer(i));
	
	}
%>


<%
 Collection<SharedVariable> sharedVariables = ProjectUtil.getReferringInstances(ci.getCell(), SharedVariable.class);
  Set<SharedMemoryTube> sharedMemoryTubes = new HashSet<SharedMemoryTube>();
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(cell, SharedMemoryTube.class));
  sharedMemoryTubes.addAll(ProjectUtil.getReferringInstances(cell, SharedMemoryTube.class));
%>

<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/shared_mem_init_decl.jet"%>

<%
for(SharedVariable svar: sharedVariables) {
	int cellCount = 0;
	for(MasterCell mCell : svar.getMasterCell()) {
		if(ci.getCell() != svar.getMasterCell().get(0) &&
			mCell == ci.getCell()) {
%>
<%		}
		++cellCount;
	}
	if(ci.getCell() == svar.getMasterCell().get(0)) {%>
<%  }
}%>

<%
for(SharedVariable svar: sharedVariables) {
int varInstanceCount = 0;
for(MasterCell mc: svar.getMasterCell()) {
	int icCount = ProjectUtil.getReferringInstances(mc, CellInstance.class).size();
	if (icCount > varInstanceCount) varInstanceCount = icCount;
}
%>
#define shared_<%=svar.getName()%> <%=svar.getName()%>__<%=(ci.getInstance()%varInstanceCount)%>
extern <%=svar.getStruct().getName()%>_t <%=svar.getName()%>__<%=(ci.getInstance()%varInstanceCount)%>;
extern int <%=svar.getName()%>__<%=(ci.getInstance()%varInstanceCount)%>_groupmembers;
<%}%>

/* Map tube ids to task relative ids */
<%for(MasterTube ti: cell.getOutput()) {
   if(ProjectUtil.getReferringInstance(ti, IgnoreHyperxTube.class) != null) continue;
    List<TubeInstance> childTubes = new LinkedList<TubeInstance>();
    childTubes.addAll(ProjectUtil.getReferringInstances(ti, TubeInstance.class));
    childTubes.retainAll(ci.getOutput());
    if (childTubes.size() == 0) continue;
%>
#define <%=ti.getName().toUpperCase()%>_CHILD_TUBE_COUNT (<%=childTubes.size()%>)
#define SWARM_SEND_RELATIVE_OUTPUT_<%=ti.getName().toUpperCase()%>(__instance__, __ptr__, __size__) \
    SWARM_SEND(OUTPUT_<%=ti.getName().toUpperCase()%>_0, __ptr__, __size__)
#define SWARM_SEND_NONBLOCKING_RELATIVE_OUTPUT_<%=ti.getName().toUpperCase()%>(__instance__, __ptr__, __size__) \
    SWARM_SEND_NONBLOCKING(OUTPUT_<%=ti.getName().toUpperCase()%>_0, __ptr__, __size__)
#define SWARM_SEND_BUSY_RELATIVE_OUTPUT_<%=ti.getName().toUpperCase()%>(__instance__) \
    SWARM_SEND_BUSY(OUTPUT_<%=ti.getName().toUpperCase()%>_0)
<%}%>

<%for(MasterTube ti: cell.getInput()) {
   if(ProjectUtil.getReferringInstance(ti, IgnoreHyperxTube.class) != null) continue;
    List<TubeInstance> childTubes = new LinkedList<TubeInstance>();
    childTubes.addAll(ProjectUtil.getReferringInstances(ti, TubeInstance.class));
    childTubes.retainAll(ci.getInput());
    if (childTubes.size() == 0) continue;
%>
#define <%=ti.getName().toUpperCase()%>_CHILD_TUBE_COUNT (<%=childTubes.size()%>)
#define SWARM_RECV_RELATIVE_INPUT_<%=ti.getName().toUpperCase()%>(__instance__, __ptr__, __size__) \
    SWARM_RECV(INPUT_<%=ti.getName().toUpperCase()%>_0, __ptr__, __size__)
#define SWARM_RECV_NONBLOCKING_RELATIVE_INPUT_<%=ti.getName().toUpperCase()%>(__instance__, __ptr__, __size__) \
    SWARM_RECV_NONBLOCKING(INPUT_<%=ti.getName().toUpperCase()%>_0, __ptr__, __size__)
#define SWARM_RECV_BUSY_RELATIVE_INPUT_<%=ti.getName().toUpperCase()%>(__instance__) \
    SWARM_RECV_BUSY(INPUT_<%=ti.getName().toUpperCase()%>_0)
<%}%>

#endif
<%
}
%>



<%
Collection<Counter> counters = ProjectUtil.getReferringInstances(cell, Counter.class);
counters.addAll(ProjectUtil.getReferringInstances(cell.getInput(), TubeReceiveCounter.class));
counters.addAll(ProjectUtil.getReferringInstances(cell.getOutput(), TubeTransmitCounter.class));
if(counters.size() != 0) {
%>
extern <%=cell.getName()%>_counters_t counter_file;
    <%for(Counter counter: counters) {
        String type;
        switch(counter.getWidth()) {
        case _16BIT: type = "uint16_t"; break;
        case _32BIT: type = "uint32_t"; break;
        case _64BIT: type = "uint64_t"; break;
        }
    %>
#define COUNTER_<%=counter.getName().toUpperCase()%>_INC (++counter_file.<%=counter.getName()%>)
#define COUNTER_<%=counter.getName().toUpperCase()%>_DEC (--counter_file.<%=counter.getName()%>)
#define COUNTER_<%=counter.getName().toUpperCase()%>_ADD(__value__) (counter_file.<%=counter.getName()%> += (__value__))
#define COUNTER_<%=counter.getName().toUpperCase()%>_SUB(__value__) (counter_file.<%=counter.getName()%> -= (__value__))
#define COUNTER_<%=counter.getName().toUpperCase()%>_SET(__value__) (counter_file.<%=counter.getName()%> = (__value__))
<%  }
}%>


#endif
