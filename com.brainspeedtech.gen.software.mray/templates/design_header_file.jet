<%@ jet package="com.brainspeedtech.gen.software.mray"
	class="DesignHeaderFile" 
	imports ="java.util.* com.brainspeedtech.swarm.project.util.* com.brainspeedtech.swarm.project.domain.*
		com.brainspeedtech.constraint.software.*
	com.brainspeedtech.struct.util.StructResourceImpl org.eclipse.emf.ecore.resource.Resource com.brainspeedtech.struct.* com.brainspeedtech.swarm.master.*
	com.brainspeedtech.swarm.master.util.* com.brainspeedtech.swarm.inst.* com.brainspeedtech.swarm.flow.* org.eclipse.emf.transaction.util.*
	com.brainspeedtech.swarm.layer.*;"
%>
<% Instance instance = (Instance) argument;
%>	
/*
 *  (c)2013 Mangstor, LLC. All rights reserved.
 */


#ifndef __GEN__<%=instance.getName().toUpperCase()%>_H__
#define __GEN__<%=instance.getName().toUpperCase()%>_H__
#include <stdint.h>
#include <string.h>
#include <xtensa/tie/xt_booleans.h>


#define GEN_DESIGN_<%=instance.getName().toUpperCase()%>
#define GEN_PLATFORM_MRAY
#define MRAY_SHARED

#include "gen_<%=instance.getName()%>_parameters.h"
#include "gen_<%=instance.getName()%>_flows.h"
<%@ include file="../../com.brainspeedtech.gen.software/template_includes/c/resolve_includes.jet"%>

<%
MasterDesign mDesign = (MasterDesign)((SwarmCachingEditingDomain)(TransactionUtil.getEditingDomain(instance))).
    getObjectByType(MasterPackage.eINSTANCE.getMasterDesign());
if (!instance.getTube().isEmpty()) {
	for(MasterTube ti : mDesign.getTube()) {%>
typedef union _<%=ti.getName()%> {
	uint32_t uint32;
<%Collection<Struct> structList = MasterUtil.getDescriptors(ti);
	for (Struct struct: structList) {%>
	<%=struct.getName()%>_t <%=struct.getName()%>;
<%}%>
} <%=ti.getName()%>_t;

<%	}
}
%>

#define SWARM_RECV(__queue__, __ptr__, __size__) SWARM_RECV_ ## __queue__((__ptr__), (__size__))
#define SWARM_SEND(__queue__, __ptr__, __size__) SWARM_SEND_ ## __queue__((__ptr__), (__size__))
#define SWARM_RECV_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_RECV_RELATIVE_ ## __queue__((__instance__), (__ptr__), (__size__))
#define SWARM_SEND_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_SEND_RELATIVE_ ## __queue__((__instance__), (__ptr__), (__size__))
#define SWARM_RECV_NONBLOCKING(__queue__, __ptr__, __size__) SWARM_RECV_NONBLOCKING_ ## __queue__((__ptr__), (__size__))
#define SWARM_SEND_NONBLOCKING(__queue__, __ptr__, __size__) SWARM_SEND_NONBLOCKING_ ## __queue__((__ptr__), (__size__))
#define SWARM_RECV_NONBLOCKING_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_RECV_NONBLOCKING_RELATIVE_ ## __queue__((__instance__), (__ptr__), (__size__))
#define SWARM_SEND_NONBLOCKING_RELATIVE(__queue__, __instance__, __ptr__, __size__) SWARM_SEND_NONBLOCKING_RELATIVE_ ## __queue__((__instance__), (__ptr__), (__size__))
#define SWARM_RECV_BUSY(__queue__) SWARM_RECV_BUSY_ ## __queue__
#define SWARM_SEND_BUSY(__queue__) SWARM_SEND_BUSY_ ## __queue__
#define SWARM_RECV_BUSY_RELATIVE(__queue__, __instance__) SWARM_RECV_BUSY_RELATIVE_ ## __queue__((__instance__))
#define SWARM_SEND_BUSY_RELATIVE(__queue__, __instance__) SWARM_SEND_BUSY_RELATIVE_ ## __queue__((__instance__))

#define SWARM_RECV_LOGGED SWARM_RECV
#define SWARM_SEND_LOGGED SWARM_SEND
#define SWARM_RECV_RELATIVE_LOGGED SWARM_RECV_RELATIVE
#define SWARM_SEND_RELATIVE_LOGGED SWARM_SEND_RELATIVE
#define SWARM_RECV_NONBLOCKING_LOGGED SWARM_RECV_NONBLOCKING
#define SWARM_SEND_NONBLOCKING_LOGGED SWARM_SEND_NONBLOCKING
#define SWARM_RECV_NONBLOCKING_RELATIVE_LOGGED SWARM_RECV_NONBLOCKING_RELATIVE
#define SWARM_SEND_NONBLOCKING_RELATIVE_LOGGED SWARM_SEND_NONBLOCKING_RELATIVE

#define SWARM_SHARED(__type__, __varname__) __type__ __varname__
#define SWARM_PRINT0(__format__) SWARM_PRINT(__format__, 0, 0, 0, 0)
#define SWARM_PRINT1(__format__, __arg0__) SWARM_PRINT(__format__, __arg0__, 0, 0, 0)
#define SWARM_PRINT2(__format__, __arg0__, __arg1__) SWARM_PRINT(__format__, __arg0__, __arg1__, 0, 0)
#define SWARM_PRINT3(__format__, __arg0__, __arg1__, __arg2__) SWARM_PRINT(__format__, __arg0__, __arg1__, __arg2__, 0)
#define SWARM_PRINT4(__format__, __arg0__, __arg1__, __arg2__, __arg3__) SWARM_PRINT(__format__, __arg0__, __arg1__, __arg2__, __arg3__)
#define SWARM_PRINT(__format__, __arg0__, __arg1__, __arg2__, __arg3__)
#define SWARM_FATAL_ERROR while(1);

#ifndef SWARM_SIZEOF
#define SWARM_SIZEOF(__arg__) (sizeof(__arg__))
#endif
#define SWARM_MEMORY_FENCE while(0);
#endif
