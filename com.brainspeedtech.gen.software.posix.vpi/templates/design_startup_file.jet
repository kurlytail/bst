<%@ jet package="com.brainspeedtech.gen.software.posix.vpi"
	class="DesignStartupFile" 
	imports ="java.util.*
	org.eclipse.emf.common.util.EList
	com.brainspeedtech.swarm.inst.*
	com.brainspeedtech.constraint.software.*
	com.brainspeedtech.constraint.software.posix.*
	com.brainspeedtech.swarm.project.util.*
	org.eclipse.emf.ecore.*;"
%>
<% Instance instance = (Instance) argument;%>	

#define _XOPEN_SOURCE 700
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <ftw.h>
#include <fcntl.h>
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <signal.h>
#include <time.h>
#include <fcntl.h>
#include "gen_<%=instance.getName()%>.h"


int unlink_cb(const char *fpath, const struct stat *sb, int typeflag, struct FTW *ftwbuf)
{
    int rv = remove(fpath);

    if (rv)
        perror(fpath);

    return rv;
}

int rmrf(char *path)
{
    return nftw(path, unlink_cb, 64, FTW_DEPTH | FTW_PHYS);
}

<%
	Set<SharedVariable> sharedVariables = new HashSet<SharedVariable>();
%>

<%for(CellInstance ci: instance.getCell()) { if (!ci.getCell().isExternal()) { %>
int <%=ci.getName()%>_pid = 0;
<%} 
	sharedVariables.addAll(ProjectUtil.getReferringInstances(ci, SharedVariable.class));
	sharedVariables.addAll(ProjectUtil.getReferringInstances(ci.getCell(), SharedVariable.class));
}%>

<%
for(SharedVariable svar: sharedVariables) {
%>
<%=svar.getStruct().getName()%>_t __shared__<%=svar.getName()%><%if(svar.getCount()>1){%>[<%=svar.getCount()%>]<%}%>
	= { 0 };
<%
}
%>

int work_dir_fd;

void design_startup(char* logname)
{
	char *program_instance_name = "<%=instance.getName()%>_logs";
	int mem_file __attribute__((unused));
	int pid_file;
	int my_pid;
	
	if (logname != NULL) {
		program_instance_name = logname;
	}
	
	work_dir_fd = open(program_instance_name, 0);
	if (work_dir_fd >= 0) {
		pid_file = openat(work_dir_fd, "pid", O_RDONLY);
		if (pid_file >= 0) {
			if (read(pid_file, &my_pid, sizeof(my_pid)) == sizeof(my_pid)) {
				if (my_pid == getpid()) {
					SWARM_PRINT("VPI already initialized\n");
					return;
				}
			}
			close (pid_file);
		}
		close(work_dir_fd);
	}
	
	rmrf(program_instance_name);
	
	SWARM_PRINT("Starting VPI %s\n", program_instance_name);	
	if (mkdir(program_instance_name, 0777) < 0) {
		perror("Error creating work directory");
		exit(-1);
	}
	
	work_dir_fd = open(program_instance_name, 0);
	if (work_dir_fd < 0) {
		perror("Error opening work directory");
		exit(-1);
	}
	
	pid_file = openat(work_dir_fd, "pid", O_CREAT | O_WRONLY, 0777);
	if (pid_file < 0) {
		perror("Error opening pid file");
		exit(-1);
	}
	
	my_pid = getpid();
	if (write(pid_file, &my_pid, sizeof(my_pid)) != sizeof(my_pid)) {
		perror("Error writing to pid file");
		exit(-1);
	}
	close (pid_file);

<%
for(SharedVariable svar: sharedVariables) {
%>
	mem_file = openat(work_dir_fd, "mem__<%=svar.getName()%>", O_CREAT | O_WRONLY);
	if (mem_file < 0) {
		perror("Error creating memfile mem__<%=svar.getName()%>");
		exit(-1);
	}
	if(write(mem_file, &__shared__<%=svar.getName()%>, sizeof(__shared__<%=svar.getName()%>)) < 0) {
		perror("Error writing memfile mem__<%=svar.getName()%>");
		exit(-1);
	}
	close(mem_file);
<%
}
%>

<%for(TubeInstance ti: instance.getTube()) { 
	Collection<SocketTube> socketTubes = ProjectUtil.getReferringInstances(ti, SocketTube.class);
	if (socketTubes.isEmpty()) {
%>
	SWARM_PRINT("Creating fifo_<%=ti.getName()%>\n");
	if (mkfifoat(work_dir_fd, "fifo_<%=ti.getName()%>", 0777) < 0) {
		perror("Error creating fifo");
		exit(-1);
	}

<%	}
}%>
	return;
}

